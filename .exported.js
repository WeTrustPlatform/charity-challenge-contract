module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint8"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601160006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001ed238038062001ed283398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b5050929190602001805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505087518951141515620001a757600080fd5b60648260ff16101515620001ba57600080fd5b60008951905060008090505b81811015620003aa5760008b82815181101515620001e057fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008b838151811015156200026357fe5b9060200190602002015160ff16111515620002e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8a82815181101515620002f557fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508a828151811015156200036557fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001c6565b508a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660069080519060200190620004859291906200075e565b5085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460088190555083600a8190555082600b60006101000a81548160ff021916908360ff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff168152602001838152602001828103825287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620006775780601f106200064b5761010080835404028352916020019162000677565b820191906000526020600020905b8154815290600101906020018083116200065957829003601f168201915b5050975050505050505050602060405180830381600087803b1580156200069d57600080fd5b505af1158015620006b2573d6000803e3d6000fd5b505050506040513d6020811015620006c957600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff02191690831515021790555050505050505050505050506200080d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007a157805160ff1916838001178555620007d2565b82800160010185558215620007d2579182015b82811115620007d1578251825591602001919060010190620007b4565b5b509050620007e19190620007e5565b5090565b6200080a91905b8082111562000806576000816000905550600101620007ec565b5090565b90565b6116b5806200081d6000396000f3fe60806040526004361061015d576000357c0100000000000000000000000000000000000000000000000000000000900480637b8c8de1116100d3578063bc3fde4e1161008c578063bc3fde4e14610727578063c407670f14610752578063ce606ee01461077d578063d87a328a146107d4578063fc741c7c146107ff578063ffa1ad74146108305761015d565b80637b8c8de1146105b7578063877303091461061c5780639562364114610647578063b06a5c521461069e578063b77309d6146106c9578063ba7fd2fb146106f85761015d565b80634e71d92d116101255780634e71d92d146103e95780635ead3d4b146104005780635f95eb4d1461046b5780636cc6cde1146104d057806370a082311461052757806370dea79a1461058c5761015d565b806307171d7f146102815780630ed7e49914610298578063306a7ce0146103135780633fad9ae0146103425780634bb278f3146103d2575b600a54421115151561016e57600080fd5b60003411151561017d57600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101cc5750600034115b156101e4576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561028d57600080fd5b506102966108c0565b005b3480156102a457600080fd5b506102d1600480360360208110156102bb57600080fd5b8101908080359060200190929190505050610a53565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031f57600080fd5b50610328610a91565b604051808215151515815260200191505060405180910390f35b34801561034e57600080fd5b50610357610aa4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039757808201518184015260208101905061037c565b50505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103de57600080fd5b506103e7610b42565b005b3480156103f557600080fd5b506103fe610bdb565b005b34801561040c57600080fd5b5061044f6004803603602081101561042357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d8d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047757600080fd5b506104ba6004803603602081101561048e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dad565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b506104e5610ed3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053357600080fd5b506105766004803603602081101561054a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef9565b6040518082815260200191505060405180910390f35b34801561059857600080fd5b506105a1610f61565b6040518082815260200191505060405180910390f35b3480156105c357600080fd5b50610606600480360360208110156105da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f67565b6040518082815260200191505060405180910390f35b34801561062857600080fd5b50610631610f7f565b6040518082815260200191505060405180910390f35b34801561065357600080fd5b5061065c610f85565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106aa57600080fd5b506106b3610fab565b6040518082815260200191505060405180910390f35b3480156106d557600080fd5b506106de610fb1565b604051808215151515815260200191505060405180910390f35b34801561070457600080fd5b5061070d610fc4565b604051808215151515815260200191505060405180910390f35b34801561073357600080fd5b5061073c610fd7565b6040518082815260200191505060405180910390f35b34801561075e57600080fd5b50610767610fdd565b6040518082815260200191505060405180910390f35b34801561078957600080fd5b50610792610fe3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107e057600080fd5b506107e9611008565b6040518082815260200191505060405180910390f35b34801561080b57600080fd5b5061081461100e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561083c57600080fd5b50610845611021565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561088557808201518184015260208101905061086a565b50505050905090810190601f1680156108b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d54421115156108d057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092b57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109e0573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610a6257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3a5780601f10610b0f57610100808354040283529160200191610b3a565b820191906000526020600020905b815481529060010190602001808311610b1d57829003601f168201915b505050505081565b601160009054906101000a900460ff16151515610b5e57600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610b8957600080fd5b600c544211151515610b9a57600080fd5b600e60009054906101000a900460ff16151515610bb657600080fd5b610bbe61105a565b6000601160006101000a81548160ff021916908315150217905550565b601160009054906101000a900460ff16151515610bf757600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610c2257600080fd5b600e60009054906101000a900460ff1680610c3e5750600c5442115b1515610c4957600080fd5b600e60019054906101000a900460ff161580610c665750600c5442115b1515610c7157600080fd5b6000610c7c33610ef9565b111515610c8857600080fd5b6000610c9333610ef9565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d20573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601160006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610e0c57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631905060006064600b60009054906101000a900460ff1660ff168302811515610e4a57fe5b04820390506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610ec457fe5b04905080945050505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff1615610f195760009050610f5c565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b600f6020528060005260406000206000915090505481565b600c5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600e60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b600b60009054906101000a900460ff1681565b6040805190810160405280600581526020017f302e342e3000000000000000000000000000000000000000000000000000000081525081565b6000611064611466565b600e60018294508391906101000a81548160ff0219169083151502179055505050801515611463576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff16156114625760003073ffffffffffffffffffffffffffffffffffffffff163190506000600380549050905060008090506000600b60009054906101000a900460ff1660ff1611156112055760006064600b60009054906101000a900460ff1660ff16850281151561112457fe5b04905080820191506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611193573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b6000818403905060008090505b6001840381101561137d57600060038281548110151561122e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff1686028115156112d057fe5b04905080860195508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561131e573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050611212565b5060008285039050600060036001860381548110151561139957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561140c573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a25050505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d602081101561152457600080fd5b81019080805190602001909291905050501561167c576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d60208110156115f757600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600102811415611642576000809250925050611685565b600460149054906101000a900460ff161561166a576000600102811460009250925050611685565b60018002811460009250925050611685565b60006001915091505b909156fea165627a7a7230582049e6c8a5bd8214ef3d053ffbef72c4a2cd51e3e8cc31fa8b9bebcfdd6ffc144d0029","sourceMap":"56:7282:0:-;;;1429:5;1398:36;;;;;;;;;;;;;;;;;;;;1588:1457;8:9:-1;5:2;;;30:1;27;20:12;5:2;1588:1457:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1588:1457:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1588:1457:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1588:1457:0;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1588:1457:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1985:7;:14;1961:13;:20;:38;1953:47;;;;;;;;2030:3;2018:9;:15;;;2010:24;;;;;;;;2044:11;2058:13;:20;2044:34;;2093:6;2102:1;2093:10;;2088:282;2109:6;2105:1;:10;2088:282;;;2136:19;2158:13;2172:1;2158:16;;;;;;;;;;;;;;;;;;2136:38;;2188:12;2206:3;2188:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2188:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2245:1;2232:7;2240:1;2232:10;;;;;;;;;;;;;;;;;;:14;;;2224:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2313:7;2321:1;2313:10;;;;;;;;;;;;;;;;;;2296:9;:14;2306:3;2296:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2349:7;2357:1;2349:10;;;;;;;;;;;;;;;;;;2337:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2088:282;2117:3;;;;;;;2088:282;;;;2395:14;2379:13;;:30;;;;;;;;;;;;;;;;;;2435:14;2419:13;;:30;;;;;;;;;;;;;;;;;;2488:14;2459:12;;:44;;;;;;;;;;;;;;;;;;2524:9;2513:8;:20;;;;;;;;;;;;:::i;:::-;;2556:11;2543:10;;:24;;;;;;;;;;;;;;;;;;2587:8;2577:7;:18;;;;2624:17;2605:16;:36;;;;2662:9;2651:8;;:20;;;;;;;;;;;;;;;;;;2694:12;;;;;;;;;;;:24;;;2719:1;2722:8;2732:10;;;;;;;;;;;2751:7;;2768:16;;2787:1;2694:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2694:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2694:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2694:95:0;;;;;;;;;;;;;;;;2681:10;:108;;;;2812:11;2799:10;;:24;;;;;;;;;;;;;;;;;;2880:8;2861:16;;:27;2833:25;:55;;;;2954:8;2926:25;;:36;2898:25;:64;;;;2991:5;2972:16;;:24;;;;;;;;;;;;;;;;;;3033:5;3006:24;;:32;;;;;;;;;;;;;;;;;;1588:1457;;;;;;;;;;;56:7282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\n\ncontract CharityChallenge {\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Fee(address indexed maker, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    string public constant VERSION = \"0.4.0\";\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    address public marketAddress;\n\n    bool public unlockOnNo;\n\n    IRealityCheck realityCheck;\n\n    string public question;\n\n    address public arbitrator;\n\n    uint256 public timeout;\n\n    bytes32 public questionId;\n\n    uint256 public challengeEndTime;\n\n    uint8 public makerFee;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\n    bool public isEventFinalized;\n\n    // hasChallengeAccomplished will be set to true if we got the expected\n    // result that allow to unlock the funds.\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint8 _makerFee,\n        bool _unlockOnNo\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        require(_makerFee < 100);\n        uint length = _npoAddresses.length;\n        for (uint i = 0; i < length; i++) {\n            address payable npo = _npoAddresses[i];\n            npoAddresses.push(npo);\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\n            npoRatios[npo] = _ratios[i];\n            sumRatio += _ratios[i];\n        }\n        contractOwner = _contractOwner;\n        marketAddress = _marketAddress;\n        realityCheck = IRealityCheck(_marketAddress);\n        question = _question;\n        arbitrator = _arbitrator;\n        timeout = _timeout;\n        challengeEndTime = _challengeEndTime;\n        makerFee = _makerFee;\n        questionId = realityCheck.askQuestion(0, question, arbitrator, uint32(timeout), uint32(challengeEndTime), 0);\n        unlockOnNo = _unlockOnNo;\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalized = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n            donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalized);\n        doFinalize();\n    }\n\n    function doFinalize() private {\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkRealitio();\n        if (!hasError) {\n            isEventFinalized = true;\n            if (hasChallengeAccomplished) {\n                uint256 totalContractBalance = address(this).balance;\n                uint length = npoAddresses.length;\n                uint256 donatedAmount = 0;\n                if (makerFee > 0) {\n                    uint256 amount = totalContractBalance * makerFee / 100;\n                    donatedAmount += amount;\n                    contractOwner.transfer(amount);\n                    emit Fee(contractOwner, amount);\n                }\n                uint256 amountForNPO = totalContractBalance - donatedAmount;\n                for (uint i = 0; i < length - 1; i++) {\n                    address payable npo = npoAddresses[i];\n                    uint8 ratio = npoRatios[npo];\n                    uint256 amount = amountForNPO * ratio / sumRatio;\n                    donatedAmount += amount;\n                    npo.transfer(amount);\n                    emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 remainingAmount = totalContractBalance - donatedAmount;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(remainingAmount);\n                emit Donated(npo, remainingAmount);\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n        require(npoRatios[_npo] > 0);\n        uint256 totalContractBalance = address(this).balance;\n        uint256 amountForNPO = totalContractBalance - (totalContractBalance * makerFee / 100);\n        uint8 ratio = npoRatios[_npo];\n        uint256 amount = amountForNPO * ratio / sumRatio;\n        return amount;\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkRealitio() private view returns (bool happened, bool errored) {\n        if (realityCheck.isFinalized(questionId)) {\n            bytes32 answer = realityCheck.getFinalAnswer(questionId);\n            if (answer == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                // Treat 'invalid' outcome as 'no'\n                // because 'invalid' is one of the valid outcomes\n                return (false, false);\n            } else {\n                if (unlockOnNo) {\n                    return (answer == 0x0000000000000000000000000000000000000000000000000000000000000000, false);\n                }\n                return (answer == 0x0000000000000000000000000000000000000000000000000000000000000001, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"RealityCheckMock":{"abi":[{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"questions","outputs":[{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"name":"template_id","type":"uint256"},{"name":"question","type":"string"},{"name":"arbitrator","type":"address"},{"name":"timeout","type":"uint32"},{"name":"opening_ts","type":"uint32"},{"name":"nonce","type":"uint256"}],"name":"askQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getFinalAnswer","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getOpeningTS","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"name":"addQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalAnswer","type":"bytes32"}],"name":"setFinalAnswer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061061e806100206000396000f3fe608060405260043610610098576000357c0100000000000000000000000000000000000000000000000000000000900480638923e5461161006b5780638923e546146102cf57806395addb90146103145780639e63fa6a14610381578063a462fb7b146103dc57610098565b806309f709721461009d578063762c38fd146100e4578063768e8fc5146102145780637f8d429e1461027c575b600080fd5b3480156100a957600080fd5b506100e2600480360360408110156100c057600080fd5b810190808035906020019092919080351515906020019092919050505061042b565b005b3480156100f057600080fd5b506101fe600480360360c081101561010757600080fd5b81019080803590602001909291908035906020019064010000000081111561012e57600080fd5b82018360208201111561014057600080fd5b8035906020019184600183028401116401000000008311171561016257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190803563ffffffff1690602001909291908035906020019092919050505061045c565b6040518082815260200191505060405180910390f35b6102666004803603608081101561022a57600080fd5b8101908080359060200190929190803563ffffffff1690602001909291908035151590602001909291908035906020019092919050505061048e565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b506102b56004803603602081101561029f57600080fd5b8101908080359060200190929190505050610513565b604051808215151515815260200191505060405180910390f35b3480156102db57600080fd5b50610312600480360360408110156102f257600080fd5b81019080803590602001909291908035906020019092919050505061053f565b005b34801561032057600080fd5b5061034d6004803603602081101561033757600080fd5b810190808035906020019092919050505061055d565b604051808463ffffffff1663ffffffff16815260200183151515158152602001828152602001935050505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b81019080803590602001909291905050506105a4565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156103e857600080fd5b50610415600480360360208110156103ff57600080fd5b81019080803590602001909291905050506105d3565b6040518082815260200191505060405180910390f35b8060008084815260200190815260200160002060000160046101000a81548160ff0219169083151502179055505050565b60007fafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be60010290509695505050505050565b60008360008087815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055508260008087815260200190815260200160002060000160046101000a81548160ff0219169083151502179055508160008087815260200190815260200160002060010181905550949350505050565b600080600083815260200190815260200160002060000160049054906101000a900460ff169050919050565b80600080848152602001908152602001600020600101819055505050565b60006020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060010154905083565b600080600083815260200190815260200160002060000160009054906101000a900463ffffffff169050919050565b600080600083815260200190815260200160002060010154905091905056fea165627a7a72305820c44daa9a253017fbbaea5405800b6a6489bedc0258d371bffc1dfca47429d4ad0029","sourceMap":"56:1513:3:-;;;266:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;266:28:3;56:1513;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\n\ncontract RealityCheckMock is IRealityCheck {\n    struct Question {\n        uint32 opening_ts;\n        bool finalized;\n        bytes32 finalAnswer;\n    }\n\n    mapping(bytes32 => Question) public questions;\n\n    constructor() public {\n    }\n\n    function askQuestion(\n        uint256 template_id, string memory question,\n        address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) public returns (bytes32) {\n\n        return 0xafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be;\n    }\n\n    function isFinalized(bytes32 question_id) public view returns (bool) {\n        return questions[question_id].finalized;\n    }\n\n    function getFinalAnswer(bytes32 question_id) public view returns (bytes32) {\n        return questions[question_id].finalAnswer;\n    }\n\n    function getOpeningTS(bytes32 question_id) public view returns (uint32) {\n        return questions[question_id].opening_ts;\n    }\n\n    function addQuestion(bytes32 question_id, uint32 opening_ts, bool finalized, bytes32 finalAnswer)\n    public payable returns (bytes32) {\n        questions[question_id].opening_ts = opening_ts;\n        questions[question_id].finalized = finalized;\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n\n    function setFinalized(bytes32 question_id, bool finalized) public {\n        questions[question_id].finalized = finalized;\n    }\n\n    function setFinalAnswer(bytes32 question_id, bytes32 finalAnswer) public {\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint8"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601160006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620021073803806200210783398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b505092919060200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508989898989898989898987518951141515620001b157600080fd5b60648260ff16101515620001c457600080fd5b60008951905060008090505b81811015620003b45760008b82815181101515620001ea57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008b838151811015156200026d57fe5b9060200190602002015160ff16111515620002f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8a82815181101515620002ff57fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508a828151811015156200036f57fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001d0565b508a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600690805190602001906200048f92919062000772565b5085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460088190555083600a8190555082600b60006101000a81548160ff021916908360ff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff168152602001838152602001828103825287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620006815780601f10620006555761010080835404028352916020019162000681565b820191906000526020600020905b8154815290600101906020018083116200066357829003601f168201915b5050975050505050505050602060405180830381600087803b158015620006a757600080fd5b505af1158015620006bc573d6000803e3d6000fd5b505050506040513d6020811015620006d357600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff02191690831515021790555050505050505050505050505050505050505050505062000821565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007b557805160ff1916838001178555620007e6565b82800160010185558215620007e6579182015b82811115620007e5578251825591602001919060010190620007c8565b5b509050620007f59190620007f9565b5090565b6200081e91905b808211156200081a57600081600090555060010162000800565b5090565b90565b6118d680620008316000396000f3fe60806040526004361061019e576000357c01000000000000000000000000000000000000000000000000000000009004806387730309116100ee578063c407670f116100a7578063d87a328a11610081578063d87a328a1461088b578063dfc39d77146108b6578063fc741c7c146108f1578063ffa1ad74146109225761019e565b8063c407670f146107ce578063c8e12f14146107f9578063ce606ee0146108345761019e565b8063877303091461069857806395623641146106c3578063b06a5c521461071a578063b77309d614610745578063ba7fd2fb14610774578063bc3fde4e146107a35761019e565b80635ead3d4b1161015b57806370a082311161013557806370a082311461056857806370dea79a146105cd578063770bd0e3146105f85780637b8c8de1146106335761019e565b80635ead3d4b146104415780635f95eb4d146104ac5780636cc6cde1146105115761019e565b806307171d7f146102c25780630ed7e499146102d9578063306a7ce0146103545780633fad9ae0146103835780634bb278f3146104135780634e71d92d1461042a575b600a5442111515156101af57600080fd5b6000341115156101be57600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561020d5750600034115b15610225576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b3480156102ce57600080fd5b506102d76109b2565b005b3480156102e557600080fd5b50610312600480360360208110156102fc57600080fd5b8101908080359060200190929190505050610b45565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036057600080fd5b50610369610b83565b604051808215151515815260200191505060405180910390f35b34801561038f57600080fd5b50610398610b96565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d85780820151818401526020810190506103bd565b50505050905090810190601f1680156104055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041f57600080fd5b50610428610c34565b005b34801561043657600080fd5b5061043f610ccd565b005b34801561044d57600080fd5b506104906004803603602081101561046457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e7f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104b857600080fd5b506104fb600480360360208110156104cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e9f565b6040518082815260200191505060405180910390f35b34801561051d57600080fd5b50610526610fc5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057457600080fd5b506105b76004803603602081101561058b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610feb565b6040518082815260200191505060405180910390f35b3480156105d957600080fd5b506105e2611053565b6040518082815260200191505060405180910390f35b34801561060457600080fd5b506106316004803603602081101561061b57600080fd5b8101908080359060200190929190505050611059565b005b34801561063f57600080fd5b506106826004803603602081101561065657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110be565b6040518082815260200191505060405180910390f35b3480156106a457600080fd5b506106ad6110d6565b6040518082815260200191505060405180910390f35b3480156106cf57600080fd5b506106d86110dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072657600080fd5b5061072f611102565b6040518082815260200191505060405180910390f35b34801561075157600080fd5b5061075a611108565b604051808215151515815260200191505060405180910390f35b34801561078057600080fd5b5061078961111b565b604051808215151515815260200191505060405180910390f35b3480156107af57600080fd5b506107b861112e565b6040518082815260200191505060405180910390f35b3480156107da57600080fd5b506107e3611134565b6040518082815260200191505060405180910390f35b34801561080557600080fd5b506108326004803603602081101561081c57600080fd5b810190808035906020019092919050505061113a565b005b34801561084057600080fd5b5061084961119f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089757600080fd5b506108a06111c4565b6040518082815260200191505060405180910390f35b3480156108c257600080fd5b506108ef600480360360208110156108d957600080fd5b81019080803590602001909291905050506111ca565b005b3480156108fd57600080fd5b5061090661122f565b604051808260ff1660ff16815260200191505060405180910390f35b34801561092e57600080fd5b50610937611242565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561097757808201518184015260208101905061095c565b50505050905090810190601f1680156109a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d54421115156109c257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1d57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610ad2573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610b5457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c2c5780601f10610c0157610100808354040283529160200191610c2c565b820191906000526020600020905b815481529060010190602001808311610c0f57829003601f168201915b505050505081565b601160009054906101000a900460ff16151515610c5057600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610c7b57600080fd5b600c544211151515610c8c57600080fd5b600e60009054906101000a900460ff16151515610ca857600080fd5b610cb061127b565b6000601160006101000a81548160ff021916908315150217905550565b601160009054906101000a900460ff16151515610ce957600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610d1457600080fd5b600e60009054906101000a900460ff1680610d305750600c5442115b1515610d3b57600080fd5b600e60019054906101000a900460ff161580610d585750600c5442115b1515610d6357600080fd5b6000610d6e33610feb565b111515610d7a57600080fd5b6000610d8533610feb565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e12573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601160006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610efe57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631905060006064600b60009054906101000a900460ff1660ff168302811515610f3c57fe5b04820390506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610fb657fe5b04905080945050505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff161561100b576000905061104e565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b457600080fd5b80600a8190555050565b600f6020528060005260406000206000915090505481565b600c5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600e60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119557600080fd5b80600c8190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122557600080fd5b80600d8190555050565b600b60009054906101000a900460ff1681565b6040805190810160405280600581526020017f302e342e3000000000000000000000000000000000000000000000000000000081525081565b6000611285611687565b600e60018294508391906101000a81548160ff0219169083151502179055505050801515611684576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff16156116835760003073ffffffffffffffffffffffffffffffffffffffff163190506000600380549050905060008090506000600b60009054906101000a900460ff1660ff1611156114265760006064600b60009054906101000a900460ff1660ff16850281151561134557fe5b04905080820191506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156113b4573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b6000818403905060008090505b6001840381101561159e57600060038281548110151561144f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff1686028115156114f157fe5b04905080860195508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561153f573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050611433565b506000828503905060006003600186038154811015156115ba57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561162d573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a25050505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d602081101561174557600080fd5b81019080805190602001909291905050501561189d576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156117ee57600080fd5b505afa158015611802573d6000803e3d6000fd5b505050506040513d602081101561181857600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001028114156118635760008092509250506118a6565b600460149054906101000a900460ff161561188b5760006001028114600092509250506118a6565b600180028114600092509250506118a6565b60006001915091505b909156fea165627a7a72305820faea6116d676bffff8731508fddf415f8f5588a675736f16827b2e0f468d2e900029","sourceMap":"59:1372:4:-;;;1429:5:0;1398:36;;;;;;;;;;;;;;;;;;;;119:589:4;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:589:4;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:589:4;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:589:4;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:589:4;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;119:589:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;489:14;513:13;536:7;553:14;577:9;596:11;617:8;635:17;662:9;681:11;1985:7:0;:14;1961:13;:20;:38;1953:47;;;;;;;;2030:3;2018:9;:15;;;2010:24;;;;;;;;2044:11;2058:13;:20;2044:34;;2093:6;2102:1;2093:10;;2088:282;2109:6;2105:1;:10;2088:282;;;2136:19;2158:13;2172:1;2158:16;;;;;;;;;;;;;;;;;;2136:38;;2188:12;2206:3;2188:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2188:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2245:1;2232:7;2240:1;2232:10;;;;;;;;;;;;;;;;;;:14;;;2224:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2313:7;2321:1;2313:10;;;;;;;;;;;;;;;;;;2296:9;:14;2306:3;2296:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2349:7;2357:1;2349:10;;;;;;;;;;;;;;;;;;2337:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2088:282;2117:3;;;;;;;2088:282;;;;2395:14;2379:13;;:30;;;;;;;;;;;;;;;;;;2435:14;2419:13;;:30;;;;;;;;;;;;;;;;;;2488:14;2459:12;;:44;;;;;;;;;;;;;;;;;;2524:9;2513:8;:20;;;;;;;;;;;;:::i;:::-;;2556:11;2543:10;;:24;;;;;;;;;;;;;;;;;;2587:8;2577:7;:18;;;;2624:17;2605:16;:36;;;;2662:9;2651:8;;:20;;;;;;;;;;;;;;;;;;2694:12;;;;;;;;;;;:24;;;2719:1;2722:8;2732:10;;;;;;;;;;;2751:7;;2768:16;;2787:1;2694:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2694:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2694:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2694:95:0;;;;;;;;;;;;;;;;2681:10;:108;;;;2812:11;2799:10;;:24;;;;;;;;;;;;;;;;;;2880:8;2861:16;;:27;2833:25;:55;;;;2954:8;2926:25;;:36;2898:25;:64;;;;2991:5;2972:16;;:24;;;;;;;;;;;;;;;;;;3033:5;3006:24;;:32;;;;;;;;;;;;;;;;;;1588:1457;;;;;;;;;;;119:589:4;;;;;;;;;;59:1372;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint8 _makerFee,\n        bool _unlockOnNo\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress,\n        _question,\n        _arbitrator,\n        _timeout,\n        _challengeEndTime,\n        _makerFee,\n        _unlockOnNo\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"}};