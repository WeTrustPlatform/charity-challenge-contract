module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000600c60006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200189c3803806200189c833981018060405260808110156200005257600080fd5b810190808051906020019092919080516401000000008111156200007557600080fd5b828101905060208101848111156200008c57600080fd5b8151856020820283011164010000000082111715620000aa57600080fd5b50509291906020018051640100000000811115620000c757600080fd5b82810190506020810184811115620000de57600080fd5b8151856020820283011164010000000082111715620000fc57600080fd5b505092919060200180519060200190929190505050815183511415156200012257600080fd5b60008351905060008090505b818110156200031257600085828151811015156200014857fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008583815181101515620001cb57fe5b9060200190602002015160ff161115156200024e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b84828151811015156200025d57fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508482815181101515620002cd57fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055505080806001019150506200012e565b50846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663439f5ac26040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200045a57600080fd5b505afa1580156200046f573d6000803e3d6000fd5b505050506040513d60208110156200048657600080fd5b810190808051906020019092919050505060068190555062eff100600654016007819055506301dfe200600754016008819055506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff021916908315150217905550505050505061139780620005056000396000f3fe6080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307171d7f146102155780630ed7e4991461022c578063306a7ce0146102a75780634bb278f3146102d65780634e71d92d146102ed5780635ead3d4b146103045780635f95eb4d1461036f57806370a08231146103d45780637b8c8de114610439578063877303091461049e57806395623641146104c9578063b77309d614610520578063bc3fde4e1461054f578063c407670f1461057a578063ce606ee0146105a5578063d87a328a146105fc578063ffa1ad7414610627575b600654421115151561010257600080fd5b60003411151561011157600080fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101605750600034115b1561017857600b600081548092919060010191905055505b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561022157600080fd5b5061022a6106b7565b005b34801561023857600080fd5b506102656004803603602081101561024f57600080fd5b810190808035906020019092919050505061084a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610888565b604051808215151515815260200191505060405180910390f35b3480156102e257600080fd5b506102eb61089b565b005b3480156102f957600080fd5b50610302610934565b005b34801561031057600080fd5b506103536004803603602081101561032757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ae6565b604051808260ff1660ff16815260200191505060405180910390f35b34801561037b57600080fd5b506103be6004803603602081101561039257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b06565b6040518082815260200191505060405180910390f35b3480156103e057600080fd5b50610423600480360360208110156103f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c04565b6040518082815260200191505060405180910390f35b34801561044557600080fd5b506104886004803603602081101561045c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c6c565b6040518082815260200191505060405180910390f35b3480156104aa57600080fd5b506104b3610c84565b6040518082815260200191505060405180910390f35b3480156104d557600080fd5b506104de610c8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052c57600080fd5b50610535610cb0565b604051808215151515815260200191505060405180910390f35b34801561055b57600080fd5b50610564610cc3565b6040518082815260200191505060405180910390f35b34801561058657600080fd5b5061058f610cc9565b6040518082815260200191505060405180910390f35b3480156105b157600080fd5b506105ba610ccf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060857600080fd5b50610611610cf4565b6040518082815260200191505060405180910390f35b34801561063357600080fd5b5061063c610cfa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067c578082015181840152602081019050610661565b50505050905090810190601f1680156106a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600854421115156106c757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561072257600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600960026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156107d7573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b60038181548110151561085957fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960019054906101000a900460ff1681565b600c60009054906101000a900460ff161515156108b757600080fd5b6001600c60006101000a81548160ff021916908315150217905550600654421115156108e257600080fd5b60075442111515156108f357600080fd5b600960009054906101000a900460ff1615151561090f57600080fd5b610917610d33565b6000600c60006101000a81548160ff021916908315150217905550565b600c60009054906101000a900460ff1615151561095057600080fd5b6001600c60006101000a81548160ff0219169083151502179055506006544211151561097b57600080fd5b600960009054906101000a900460ff1680610997575060075442115b15156109a257600080fd5b600960019054906101000a900460ff1615806109bf575060075442115b15156109ca57600080fd5b60006109d533610c04565b1115156109e157600080fd5b60006109ec33610c04565b90506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a79573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000600c60006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610b6557600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610bf657fe5b049050809350505050919050565b6000600960029054906101000a900460ff1615610c245760009050610c67565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600a6020528060005260406000206000915090505481565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900460ff1681565b60065481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6040805190810160405280600581526020017f302e322e3000000000000000000000000000000000000000000000000000000081525081565b6000610d3d611019565b600960018294508391906101000a81548160ff0219169083151502179055505050801515611016576001600960006101000a81548160ff021916908315150217905550600960019054906101000a900460ff16156110155760003073ffffffffffffffffffffffffffffffffffffffff1631905060006003805490509050600080905060008090505b60018303811015610f31576000600382815481101515610de257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168802811515610e8457fe5b04905080850194508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ed2573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050610dc6565b50600081840390506000600360018503815481101515610f4d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610fc0573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d4e40836040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d60208110156110ca57600080fd5b81019080805190602001909291905050501561135e57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304be2f506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d602081101561118e57600080fd5b8101908080519060200190929190505050156111b05760008091509150611367565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d602081101561126c57600080fd5b810190808051906020019092919050505090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561131157600080fd5b505afa158015611325573d6000803e3d6000fd5b505050506040513d602081101561133b57600080fd5b810190808051906020019092919050505090508181116000935093505050611367565b60006001915091505b909156fea165627a7a72305820050e5b8bd5a4916b7c52251da2941121d8ce1c77c228be4d8ca10fee35d730810029","sourceMap":"50:5737:0:-;;;1057:5;1026:36;;;;;;;;;;;;;;;;;;;;1216:965;8:9:-1;5:2;;;30:1;27;20:12;5:2;1216:965:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1216:965:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1216:965:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1216:965:0;;;;;;;;;;;;;;;;;1439:7;:14;1415:13;:20;:38;1407:47;;;;;;;;1464:11;1478:13;:20;1464:34;;1513:6;1522:1;1513:10;;1508:282;1529:6;1525:1;:10;1508:282;;;1556:19;1578:13;1592:1;1578:16;;;;;;;;;;;;;;;;;;1556:38;;1608:12;1626:3;1608:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1608:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1665:1;1652:7;1660:1;1652:10;;;;;;;;;;;;;;;;;;:14;;;1644:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1733:7;1741:1;1733:10;;;;;;;;;;;;;;;;;;1716:9;:14;1726:3;1716:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;1769:7;1777:1;1769:10;;;;;;;;;;;;;;;;;;1757:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1508:282;1537:3;;;;;;;1508:282;;;;1815:14;1799:13;;:30;;;;;;;;;;;;;;;;;;1855:14;1839:13;;:30;;;;;;;;;;;;;;;;;;1896:14;1879:6;;:32;;;;;;;;;;;;;;;;;;1940:6;;;;;;;;;;;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1940:19:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1940:19:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1940:19:0;;;;;;;;;;;;;;;;1921:16;:38;;;;2016:8;1997:16;;:27;1969:25;:55;;;;2090:8;2062:25;;:36;2034:25;:64;;;;2127:5;2108:16;;:24;;;;;;;;;;;;;;;;;;2169:5;2142:24;;:32;;;;;;;;;;;;;;;;;;1216:965;;;;;50:5737;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./IMarket.sol\";\n\ncontract CharityChallenge {\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    string public constant VERSION = \"0.2.0\";\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    address public marketAddress;\n\n    IMarket market;\n\n    uint256 public challengeEndTime;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\n    bool public isEventFinalized;\n\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        uint length = _npoAddresses.length;\n        for (uint i = 0; i < length; i++) {\n            address payable npo = _npoAddresses[i];\n            npoAddresses.push(npo);\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\n            npoRatios[npo] = _ratios[i];\n            sumRatio += _ratios[i];\n        }\n        contractOwner = _contractOwner;\n        marketAddress = _marketAddress;\n        market = IMarket(_marketAddress);\n        challengeEndTime = market.getEndTime();\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalized = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n            donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalized);\n        doFinalize();\n    }\n\n    function doFinalize() private {\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkAugur();\n        if (!hasError) {\n            isEventFinalized = true;\n            if (hasChallengeAccomplished) {\n                uint256 totalContractBalance = address(this).balance;\n                uint length = npoAddresses.length;\n                uint256 donatedAmount = 0;\n                for (uint i = 0; i < length - 1; i++) {\n                    address payable npo = npoAddresses[i];\n                    uint8 ratio = npoRatios[npo];\n                    uint256 amount = totalContractBalance * ratio / sumRatio;\n                    donatedAmount += amount;\n                    npo.transfer(amount);\n                    emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 remainingAmount = totalContractBalance - donatedAmount;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(remainingAmount);\n                emit Donated(npo, remainingAmount);\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n        require(npoRatios[_npo] > 0);\n        uint256 totalContractBalance = address(this).balance;\n        uint8 ratio = npoRatios[_npo];\n        uint256 amount = totalContractBalance * ratio / sumRatio;\n        return amount;\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkAugur() private view returns (bool happened, bool errored) {\n        if (market.isFinalized()) {\n            if (market.isInvalid()) {\n                // Treat 'invalid' outcome as 'no'\n                // because 'invalid' is one of the valid outcomes\n                return (false, false);\n            } else {\n                uint256 no = market.getWinningPayoutNumerator(0);\n                uint256 yes = market.getWinningPayoutNumerator(1);\n                return (yes > no, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"},"MarketMock":{"abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isInvalid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_invalid","type":"bool"}],"name":"setInvalid","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint32[2]"}],"name":"setPayoutNumerators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"setEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061045c806100206000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304be2f501461009357806320b27291146100c257806329085679146100ff5780633c2648201461013c578063439f5ac21461018b578063467791bf146101b65780638d4e408314610228578063ccb98ffc14610257575b600080fd5b34801561009f57600080fd5b506100a8610292565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100fd600480360360208110156100e557600080fd5b810190808035151590602001909291905050506102a8565b005b34801561010b57600080fd5b5061013a6004803603602081101561012257600080fd5b810190808035151590602001909291905050506102c4565b005b34801561014857600080fd5b506101756004803603602081101561015f57600080fd5b81019080803590602001909291905050506102e1565b6040518082815260200191505060405180910390f35b34801561019757600080fd5b506101a061031b565b6040518082815260200191505060405180910390f35b3480156101c257600080fd5b50610226600480360360408110156101d957600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610325565b005b34801561023457600080fd5b5061023d61033a565b604051808215151515815260200191505060405180910390f35b34801561026357600080fd5b506102906004803603602081101561027a57600080fd5b8101908080359060200190929190505050610350565b005b60008060019054906101000a900460ff16905090565b806000806101000a81548160ff02191690831515021790555050565b80600060016101000a81548160ff02191690831515021790555050565b60006001826002811015156102f257fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff169050919050565b6000600254905090565b80600190600261033692919061035a565b5050565b60008060009054906101000a900460ff16905090565b8060028190555050565b8260026007016008900481019282156103ec5791602002820160005b838211156103ba57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610376565b80156103ea5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026103ba565b505b5090506103f991906103fd565b5090565b61042d91905b8082111561042957600081816101000a81549063ffffffff021916905550600101610403565b5090565b9056fea165627a7a72305820fc8cf029eb70193d85f52bb6297d0e4394a18a1d1fd610bcf9b591e8192f29220029","sourceMap":"50:960:2:-;;;179:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;179:28:2;50:960;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./IMarket.sol\";\n\ncontract MarketMock is IMarket {\n    bool finalized;\n    bool invalid;\n    uint32[2] payoutNumerators;\n    uint256 endTime;\n\n    constructor() public {\n    }\n\n    function isFinalized() public view returns (bool) {\n        return finalized;\n    }\n    \n    function isInvalid() public view returns (bool) {\n        return invalid;\n    }\n\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256) {\n        return payoutNumerators[_outcome];\n    }\n\n    function getEndTime() public view returns (uint256) {\n        return endTime;\n    }\n    \n    function setFinalized(bool _finalized) public {\n        finalized = _finalized;\n    }\n\n    function setInvalid(bool _invalid) public {\n        invalid = _invalid;\n    }\n\n    function setPayoutNumerators(uint32[2] memory _payoutNumerators) public {\n        payoutNumerators = _payoutNumerators;\n    }\n\n    function setEndTime(uint256 _endTime) public {\n        endTime = _endTime;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000600c60006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001aa538038062001aa5833981018060405260808110156200005257600080fd5b810190808051906020019092919080516401000000008111156200007557600080fd5b828101905060208101848111156200008c57600080fd5b8151856020820283011164010000000082111715620000aa57600080fd5b50509291906020018051640100000000811115620000c757600080fd5b82810190506020810184811115620000de57600080fd5b8151856020820283011164010000000082111715620000fc57600080fd5b50509291906020018051906020019092919050505083838383815183511415156200012657600080fd5b60008351905060008090505b818110156200031657600085828151811015156200014c57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008583815181101515620001cf57fe5b9060200190602002015160ff1611151562000252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b84828151811015156200026157fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508482815181101515620002d157fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff16021790555050808060010191505062000132565b50846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663439f5ac26040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200045e57600080fd5b505afa15801562000473573d6000803e3d6000fd5b505050506040513d60208110156200048a57600080fd5b810190808051906020019092919050505060068190555062eff100600654016007819055506301dfe200600754016008819055506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff021916908315150217905550505050505050505050611598806200050d6000396000f3fe608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307171d7f146102365780630ed7e4991461024d578063306a7ce0146102c85780634bb278f3146102f75780634e71d92d1461030e5780635ead3d4b146103255780635f95eb4d1461039057806370a08231146103f5578063770bd0e31461045a5780637b8c8de11461049557806387730309146104fa5780639562364114610525578063b77309d61461057c578063bc3fde4e146105ab578063c407670f146105d6578063c8e12f1414610601578063ce606ee01461063c578063d87a328a14610693578063dfc39d77146106be578063ffa1ad74146106f9575b600654421115151561012357600080fd5b60003411151561013257600080fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101815750600034115b1561019957600b600081548092919060010191905055505b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561024257600080fd5b5061024b610789565b005b34801561025957600080fd5b506102866004803603602081101561027057600080fd5b810190808035906020019092919050505061091c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d457600080fd5b506102dd61095a565b604051808215151515815260200191505060405180910390f35b34801561030357600080fd5b5061030c61096d565b005b34801561031a57600080fd5b50610323610a06565b005b34801561033157600080fd5b506103746004803603602081101561034857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb8565b604051808260ff1660ff16815260200191505060405180910390f35b34801561039c57600080fd5b506103df600480360360208110156103b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd8565b6040518082815260200191505060405180910390f35b34801561040157600080fd5b506104446004803603602081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd6565b6040518082815260200191505060405180910390f35b34801561046657600080fd5b506104936004803603602081101561047d57600080fd5b8101908080359060200190929190505050610d3e565b005b3480156104a157600080fd5b506104e4600480360360208110156104b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610da3565b6040518082815260200191505060405180910390f35b34801561050657600080fd5b5061050f610dbb565b6040518082815260200191505060405180910390f35b34801561053157600080fd5b5061053a610dc1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058857600080fd5b50610591610de7565b604051808215151515815260200191505060405180910390f35b3480156105b757600080fd5b506105c0610dfa565b6040518082815260200191505060405180910390f35b3480156105e257600080fd5b506105eb610e00565b6040518082815260200191505060405180910390f35b34801561060d57600080fd5b5061063a6004803603602081101561062457600080fd5b8101908080359060200190929190505050610e06565b005b34801561064857600080fd5b50610651610e6b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069f57600080fd5b506106a8610e90565b6040518082815260200191505060405180910390f35b3480156106ca57600080fd5b506106f7600480360360208110156106e157600080fd5b8101908080359060200190929190505050610e96565b005b34801561070557600080fd5b5061070e610efb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074e578082015181840152602081019050610733565b50505050905090810190601f16801561077b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6008544211151561079957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f457600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600960026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156108a9573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b60038181548110151561092b57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960019054906101000a900460ff1681565b600c60009054906101000a900460ff1615151561098957600080fd5b6001600c60006101000a81548160ff021916908315150217905550600654421115156109b457600080fd5b60075442111515156109c557600080fd5b600960009054906101000a900460ff161515156109e157600080fd5b6109e9610f34565b6000600c60006101000a81548160ff021916908315150217905550565b600c60009054906101000a900460ff16151515610a2257600080fd5b6001600c60006101000a81548160ff02191690831515021790555060065442111515610a4d57600080fd5b600960009054906101000a900460ff1680610a69575060075442115b1515610a7457600080fd5b600960019054906101000a900460ff161580610a91575060075442115b1515610a9c57600080fd5b6000610aa733610cd6565b111515610ab357600080fd5b6000610abe33610cd6565b90506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b4b573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000600c60006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610c3757600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610cc857fe5b049050809350505050919050565b6000600960029054906101000a900460ff1615610cf65760009050610d39565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9957600080fd5b8060068190555050565b600a6020528060005260406000206000915090505481565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900460ff1681565b60065481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6157600080fd5b8060078190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ef157600080fd5b8060088190555050565b6040805190810160405280600581526020017f302e322e3000000000000000000000000000000000000000000000000000000081525081565b6000610f3e61121a565b600960018294508391906101000a81548160ff0219169083151502179055505050801515611217576001600960006101000a81548160ff021916908315150217905550600960019054906101000a900460ff16156112165760003073ffffffffffffffffffffffffffffffffffffffff1631905060006003805490509050600080905060008090505b60018303811015611132576000600382815481101515610fe357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff16880281151561108557fe5b04905080850194508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110d3573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050610fc7565b5060008184039050600060036001850381548110151561114e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156111c1573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d4e40836040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156112a157600080fd5b505afa1580156112b5573d6000803e3d6000fd5b505050506040513d60208110156112cb57600080fd5b81019080805190602001909291905050501561155f57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304be2f506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561136557600080fd5b505afa158015611379573d6000803e3d6000fd5b505050506040513d602081101561138f57600080fd5b8101908080519060200190929190505050156113b15760008091509150611568565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d602081101561146d57600080fd5b810190808051906020019092919050505090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561151257600080fd5b505afa158015611526573d6000803e3d6000fd5b505050506040513d602081101561153c57600080fd5b810190808051906020019092919050505090508181116000935093505050611568565b60006001915091505b909156fea165627a7a723058201a3ba6cc20846d7ad31dc6f8e802b859134b879abd57a19e68d805955eee73070029","sourceMap":"59:1073:4:-;;;1057:5:0;1026:36;;;;;;;;;;;;;;;;;;;;119:290:4;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:290:4;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:290:4;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:290:4;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:290:4;;;;;;;;;;;;;;;;;315:14;339:13;362:7;379:14;1439:7:0;:14;1415:13;:20;:38;1407:47;;;;;;;;1464:11;1478:13;:20;1464:34;;1513:6;1522:1;1513:10;;1508:282;1529:6;1525:1;:10;1508:282;;;1556:19;1578:13;1592:1;1578:16;;;;;;;;;;;;;;;;;;1556:38;;1608:12;1626:3;1608:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1608:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1665:1;1652:7;1660:1;1652:10;;;;;;;;;;;;;;;;;;:14;;;1644:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1733:7;1741:1;1733:10;;;;;;;;;;;;;;;;;;1716:9;:14;1726:3;1716:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;1769:7;1777:1;1769:10;;;;;;;;;;;;;;;;;;1757:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1508:282;1537:3;;;;;;;1508:282;;;;1815:14;1799:13;;:30;;;;;;;;;;;;;;;;;;1855:14;1839:13;;:30;;;;;;;;;;;;;;;;;;1896:14;1879:6;;:32;;;;;;;;;;;;;;;;;;1940:6;;;;;;;;;;;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1940:19:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1940:19:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1940:19:0;;;;;;;;;;;;;;;;1921:16;:38;;;;2016:8;1997:16;;:27;1969:25;:55;;;;2090:8;2062:25;;:36;2034:25;:64;;;;2127:5;2108:16;;:24;;;;;;;;;;;;;;;;;;2169:5;2142:24;;:32;;;;;;;;;;;;;;;;;;1216:965;;;;;119:290:4;;;;59:1073;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"}};