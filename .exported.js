module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalizedAndValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"","sourceMap":"50:5392:0:-;;;966:5;935:36;;;;;;;;;;;;;;;;;;;;1125:893;8:9:-1;5:2;;;30:1;27;20:12;5:2;1125:893:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1125:893:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1125:893:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1125:893:0;;;;;;;;;;;;;;;;;1348:7;:14;1324:13;:20;:38;1316:47;;;;;;;;1373:11;1387:13;:20;1373:34;;1433:14;1417:13;;:30;;;;;;;;;;;;;;;;;;1462:6;1471:1;1462:10;;1457:202;1478:6;1474:1;:10;1457:202;;;1503:19;1525:13;1539:1;1525:16;;;;;;;;;;;;;;;;;;1503:38;;1553:12;1571:3;1553:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1553:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1604:7;1612:1;1604:10;;;;;;;;;;;;;;;;;;1587:9;:14;1597:3;1587:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;1638:7;1646:1;1638:10;;;;;;;;;;;;;;;;;;1626:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1457:202;1486:3;;;;;;;1457:202;;;;1684:14;1668:13;;:30;;;;;;;;;;;;;;;;;;1725:14;1708:6;;:32;;;;;;;;;;;;;;;;;;1769:6;;;;;;;;;;;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1769:19:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1769:19:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1769:19:0;;;;;;;;;;;;;;;;1750:16;:38;;;;1845:8;1826:16;;:27;1798:25;:55;;;;1919:8;1891:25;;:36;1863:25;:64;;;;1964:5;1937:24;;:32;;;;;;;;;;;;;;;;;;2006:5;1979:24;;:32;;;;;;;;;;;;;;;;;;1125:893;;;;;50:5392;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./IMarket.sol\";\n\ncontract CharityChallenge {\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    address public marketAddress;\n\n    IMarket market;\n\n    uint256 public challengeEndTime;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    bool public isEventFinalizedAndValid;\n\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        uint length = _npoAddresses.length;\n        contractOwner = _contractOwner;\n        for (uint i = 0; i < length; i++) {\n          address payable npo = _npoAddresses[i];\n          npoAddresses.push(npo);\n          npoRatios[npo] = _ratios[i];\n          sumRatio += _ratios[i];\n        }\n        marketAddress = _marketAddress;\n        market = IMarket(_marketAddress);\n        challengeEndTime = market.getEndTime();\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalizedAndValid = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n          donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalizedAndValid);\n\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkAugur();\n        if (!hasError) {\n            isEventFinalizedAndValid = true;\n            if (hasChallengeAccomplished) {\n                uint256 totalContractBalance = address(this).balance;\n                uint length = npoAddresses.length;\n                uint256 donatedAmount = 0;\n                for (uint i = 0; i < length - 1; i++) {\n                  address payable npo = npoAddresses[i];\n                  uint8 ratio = npoRatios[npo];\n                  uint256 amount = totalContractBalance * ratio / sumRatio;\n                  donatedAmount += amount;\n                  npo.transfer(amount);\n                  emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 remainingAmount = totalContractBalance - donatedAmount;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(remainingAmount);\n                emit Donated(npo, remainingAmount);\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n      require(npoRatios[_npo] > 0);\n      uint256 totalContractBalance = address(this).balance;\n      uint8 ratio = npoRatios[_npo];\n      uint256 amount = totalContractBalance * ratio / sumRatio;\n      return amount;\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalizedAndValid || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkAugur() private view returns (bool happened, bool errored) {\n        if (market.isFinalized()) {\n            if (market.isInvalid()) {\n                return (false, true);\n            } else {\n                uint256 no = market.getWinningPayoutNumerator(0);\n                uint256 yes = market.getWinningPayoutNumerator(1);\n                return (yes > no, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"},"MarketMock":{"abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isInvalid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_invalid","type":"bool"}],"name":"setInvalid","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint32[2]"}],"name":"setPayoutNumerators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"setEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061045c806100206000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304be2f501461009357806320b27291146100c257806329085679146100ff5780633c2648201461013c578063439f5ac21461018b578063467791bf146101b65780638d4e408314610228578063ccb98ffc14610257575b600080fd5b34801561009f57600080fd5b506100a8610292565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100fd600480360360208110156100e557600080fd5b810190808035151590602001909291905050506102a8565b005b34801561010b57600080fd5b5061013a6004803603602081101561012257600080fd5b810190808035151590602001909291905050506102c4565b005b34801561014857600080fd5b506101756004803603602081101561015f57600080fd5b81019080803590602001909291905050506102e1565b6040518082815260200191505060405180910390f35b34801561019757600080fd5b506101a061031b565b6040518082815260200191505060405180910390f35b3480156101c257600080fd5b50610226600480360360408110156101d957600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610325565b005b34801561023457600080fd5b5061023d61033a565b604051808215151515815260200191505060405180910390f35b34801561026357600080fd5b506102906004803603602081101561027a57600080fd5b8101908080359060200190929190505050610350565b005b60008060019054906101000a900460ff16905090565b806000806101000a81548160ff02191690831515021790555050565b80600060016101000a81548160ff02191690831515021790555050565b60006001826002811015156102f257fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff169050919050565b6000600254905090565b80600190600261033692919061035a565b5050565b60008060009054906101000a900460ff16905090565b8060028190555050565b8260026007016008900481019282156103ec5791602002820160005b838211156103ba57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610376565b80156103ea5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026103ba565b505b5090506103f991906103fd565b5090565b61042d91905b8082111561042957600081816101000a81549063ffffffff021916905550600101610403565b5090565b9056fea165627a7a723058207d0bff4876adfa36accb12c8f22343f2bd68e673b58a79259c269abb361e27150029","sourceMap":"50:958:2:-;;;179:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;179:28:2;50:958;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./IMarket.sol\";\n\ncontract MarketMock is IMarket {\n    bool finalized;\n    bool invalid;\n    uint32[2] payoutNumerators;\n    uint256 endTime;\n\n    constructor() public {\n    }\n\n    function isFinalized() public view returns (bool) {\n        return finalized;\n    }\n    \n    function isInvalid() public view returns (bool) {\n        return invalid;\n    }\n\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256) {\n        return payoutNumerators[_outcome];\n    }\n\n    function getEndTime() public view returns (uint256) {\n        return endTime;\n    }\n    \n    function setFinalized(bool _finalized) public {\n        finalized = _finalized;\n    }\n\n    function setInvalid(bool _invalid) public {\n        invalid = _invalid;\n    }\n\n    function setPayoutNumerators(uint32[2] memory _payoutNumerators) public {\n        payoutNumerators = _payoutNumerators;\n    }\n\n    function setEndTime(uint256 _endTime) public {\n      endTime = _endTime;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalizedAndValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000600c60006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200193438038062001934833981018060405260808110156200005257600080fd5b810190808051906020019092919080516401000000008111156200007557600080fd5b828101905060208101848111156200008c57600080fd5b8151856020820283011164010000000082111715620000aa57600080fd5b50509291906020018051640100000000811115620000c757600080fd5b82810190506020810184811115620000de57600080fd5b8151856020820283011164010000000082111715620000fc57600080fd5b50509291906020018051906020019092919050505083838383815183511415156200012657600080fd5b600083519050846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008090505b81811015620002c257600085828151811015156200018c57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084828151811015156200020d57fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555084828151811015156200027d57fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff16021790555050808060010191505062000172565b5081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663439f5ac26040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015620003ca57600080fd5b505afa158015620003df573d6000803e3d6000fd5b505050506040513d6020811015620003f657600080fd5b810190808051906020019092919050505060068190555062eff100600654016007819055506301dfe200600754016008819055506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff0219169083151502179055505050505050505050506114bb80620004796000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307171d7f1461022b5780630ed7e49914610242578063306a7ce0146102bd5780634bb278f3146102ec5780634e71d92d146103035780635ead3d4b1461031a5780635f95eb4d1461038557806370a08231146103ea578063770bd0e31461044f5780637b8c8de11461048a57806387730309146104ef578063956236411461051a578063bc3fde4e14610571578063c407670f1461059c578063c8e12f14146105c7578063ce606ee014610602578063d87a328a14610659578063dfc39d7714610684578063e8e3ae69146106bf575b600654421115151561011857600080fd5b60003411151561012757600080fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101765750600034115b1561018e57600b600081548092919060010191905055505b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561023757600080fd5b506102406106ee565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610881565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c957600080fd5b506102d26108bf565b604051808215151515815260200191505060405180910390f35b3480156102f857600080fd5b506103016108d2565b005b34801561030f57600080fd5b50610318610c47565b005b34801561032657600080fd5b506103696004803603602081101561033d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610df9565b604051808260ff1660ff16815260200191505060405180910390f35b34801561039157600080fd5b506103d4600480360360208110156103a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e19565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b506104396004803603602081101561040d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f17565b6040518082815260200191505060405180910390f35b34801561045b57600080fd5b506104886004803603602081101561047257600080fd5b8101908080359060200190929190505050610f7f565b005b34801561049657600080fd5b506104d9600480360360208110156104ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe4565b6040518082815260200191505060405180910390f35b3480156104fb57600080fd5b50610504610ffc565b6040518082815260200191505060405180910390f35b34801561052657600080fd5b5061052f611002565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057d57600080fd5b50610586611028565b6040518082815260200191505060405180910390f35b3480156105a857600080fd5b506105b161102e565b6040518082815260200191505060405180910390f35b3480156105d357600080fd5b50610600600480360360208110156105ea57600080fd5b8101908080359060200190929190505050611034565b005b34801561060e57600080fd5b50610617611099565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066557600080fd5b5061066e6110be565b6040518082815260200191505060405180910390f35b34801561069057600080fd5b506106bd600480360360208110156106a757600080fd5b81019080803590602001909291905050506110c4565b005b3480156106cb57600080fd5b506106d4611129565b604051808215151515815260200191505060405180910390f35b600854421115156106fe57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561075957600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600960026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561080e573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b60038181548110151561089057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960019054906101000a900460ff1681565b600c60009054906101000a900460ff161515156108ee57600080fd5b6001600c60006101000a81548160ff0219169083151502179055506006544211151561091957600080fd5b600754421115151561092a57600080fd5b600960009054906101000a900460ff1615151561094657600080fd5b600061095061113c565b600960018294508391906101000a81548160ff0219169083151502179055505050801515610c29576001600960006101000a81548160ff021916908315150217905550600960019054906101000a900460ff1615610c285760003073ffffffffffffffffffffffffffffffffffffffff1631905060006003805490509050600080905060008090505b60018303811015610b445760006003828154811015156109f557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168802811515610a9757fe5b04905080850194508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ae5573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a250505080806001019150506109d9565b50600081840390506000600360018503815481101515610b6057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610bd3573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505050505b5b506000600c60006101000a81548160ff021916908315150217905550565b600c60009054906101000a900460ff16151515610c6357600080fd5b6001600c60006101000a81548160ff02191690831515021790555060065442111515610c8e57600080fd5b600960009054906101000a900460ff1680610caa575060075442115b1515610cb557600080fd5b600960019054906101000a900460ff161580610cd2575060075442115b1515610cdd57600080fd5b6000610ce833610f17565b111515610cf457600080fd5b6000610cff33610f17565b90506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d8c573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000600c60006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610e7857600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610f0957fe5b049050809350505050919050565b6000600960029054906101000a900460ff1615610f375760009050610f7a565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fda57600080fd5b8060068190555050565b600a6020528060005260406000206000915090505481565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108f57600080fd5b8060078190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111f57600080fd5b8060088190555050565b600960009054906101000a900460ff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d4e40836040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d60208110156111ed57600080fd5b81019080805190602001909291905050501561148257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304be2f506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561128757600080fd5b505afa15801561129b573d6000803e3d6000fd5b505050506040513d60208110156112b157600080fd5b8101908080519060200190929190505050156112d457600060019150915061148b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d602081101561139057600080fd5b810190808051906020019092919050505090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c26482060016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b81019080805190602001909291905050509050818111600093509350505061148b565b60006001915091505b909156fea165627a7a72305820011bbe0aac7d22a6667c396a47d2cc6fff9c5832901e8ddea50fad37f2fcff980029","sourceMap":"59:1073:4:-;;;966:5:0;935:36;;;;;;;;;;;;;;;;;;;;119:290:4;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:290:4;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:290:4;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:290:4;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:290:4;;;;;;;;;;;;;;;;;315:14;339:13;362:7;379:14;1348:7:0;:14;1324:13;:20;:38;1316:47;;;;;;;;1373:11;1387:13;:20;1373:34;;1433:14;1417:13;;:30;;;;;;;;;;;;;;;;;;1462:6;1471:1;1462:10;;1457:202;1478:6;1474:1;:10;1457:202;;;1503:19;1525:13;1539:1;1525:16;;;;;;;;;;;;;;;;;;1503:38;;1553:12;1571:3;1553:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1553:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1604:7;1612:1;1604:10;;;;;;;;;;;;;;;;;;1587:9;:14;1597:3;1587:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;1638:7;1646:1;1638:10;;;;;;;;;;;;;;;;;;1626:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1457:202;1486:3;;;;;;;1457:202;;;;1684:14;1668:13;;:30;;;;;;;;;;;;;;;;;;1725:14;1708:6;;:32;;;;;;;;;;;;;;;;;;1769:6;;;;;;;;;;;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1769:19:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1769:19:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1769:19:0;;;;;;;;;;;;;;;;1750:16;:38;;;;1845:8;1826:16;;:27;1798:25;:55;;;;1919:8;1891:25;;:36;1863:25;:64;;;;1964:5;1937:24;;:32;;;;;;;;;;;;;;;;;;2006:5;1979:24;;:32;;;;;;;;;;;;;;;;;;1125:893;;;;;119:290:4;;;;59:1073;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"}};