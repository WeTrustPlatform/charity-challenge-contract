module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601060006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001cfc38038062001cfc83398101806040526101208110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b505092919060200180519060200190929190805190602001909291908051906020019092919080519060200190929190505050865188511415156200019d57600080fd5b60008851905060008090505b818110156200038d5760008a82815181101515620001c357fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008a838151811015156200024657fe5b9060200190602002015160ff16111515620002c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8982815181101515620002d857fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555089828151811015156200034857fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001a9565b50896000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600690805190602001906200046892919062000725565b5084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360088190555082600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018381526020018281038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200063f5780601f1062000613576101008083540402835291602001916200063f565b820191906000526020600020905b8154815290600101906020018083116200062157829003601f168201915b5050975050505050505050602060405180830381600087803b1580156200066557600080fd5b505af11580156200067a573d6000803e3d6000fd5b505050506040513d60208110156200069157600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600b819055506301dfe200600b5401600c819055506000600d60006101000a81548160ff0219169083151502179055506000600d60016101000a81548160ff02191690831515021790555050505050505050505050620007d4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200076857805160ff191683800117855562000799565b8280016001018555821562000799579182015b82811115620007985782518255916020019190600101906200077b565b5b509050620007a89190620007ac565b5090565b620007d191905b80821115620007cd576000816000905550600101620007b3565b5090565b90565b61151880620007e46000396000f3fe608060405260043610610152576000357c0100000000000000000000000000000000000000000000000000000000900480637b8c8de1116100c8578063ba7fd2fb1161008c578063ba7fd2fb146106ed578063bc3fde4e1461071c578063c407670f14610747578063ce606ee014610772578063d87a328a146107c9578063ffa1ad74146107f457610152565b80637b8c8de1146105ac5780638773030914610611578063956236411461063c578063b06a5c5214610693578063b77309d6146106be57610152565b80634e71d92d1161011a5780634e71d92d146103de5780635ead3d4b146103f55780635f95eb4d146104605780636cc6cde1146104c557806370a082311461051c57806370dea79a1461058157610152565b806307171d7f146102765780630ed7e4991461028d578063306a7ce0146103085780633fad9ae0146103375780634bb278f3146103c7575b600a54421115151561016357600080fd5b60003411151561017257600080fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101c15750600034115b156101d957600f600081548092919060010191905055505b34600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561028257600080fd5b5061028b610884565b005b34801561029957600080fd5b506102c6600480360360208110156102b057600080fd5b8101908080359060200190929190505050610a17565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031457600080fd5b5061031d610a55565b604051808215151515815260200191505060405180910390f35b34801561034357600080fd5b5061034c610a68565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d357600080fd5b506103dc610b06565b005b3480156103ea57600080fd5b506103f3610b9f565b005b34801561040157600080fd5b506104446004803603602081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d51565b604051808260ff1660ff16815260200191505060405180910390f35b34801561046c57600080fd5b506104af6004803603602081101561048357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d71565b6040518082815260200191505060405180910390f35b3480156104d157600080fd5b506104da610e6f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052857600080fd5b5061056b6004803603602081101561053f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e95565b6040518082815260200191505060405180910390f35b34801561058d57600080fd5b50610596610efd565b6040518082815260200191505060405180910390f35b3480156105b857600080fd5b506105fb600480360360208110156105cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f03565b6040518082815260200191505060405180910390f35b34801561061d57600080fd5b50610626610f1b565b6040518082815260200191505060405180910390f35b34801561064857600080fd5b50610651610f21565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069f57600080fd5b506106a8610f47565b6040518082815260200191505060405180910390f35b3480156106ca57600080fd5b506106d3610f4d565b604051808215151515815260200191505060405180910390f35b3480156106f957600080fd5b50610702610f60565b604051808215151515815260200191505060405180910390f35b34801561072857600080fd5b50610731610f73565b6040518082815260200191505060405180910390f35b34801561075357600080fd5b5061075c610f79565b6040518082815260200191505060405180910390f35b34801561077e57600080fd5b50610787610f7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d557600080fd5b506107de610fa4565b6040518082815260200191505060405180910390f35b34801561080057600080fd5b50610809610faa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561084957808201518184015260208101905061082e565b50505050905090810190601f1680156108765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600c544211151561089457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108ef57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600d60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109a4573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610a2657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610afe5780601f10610ad357610100808354040283529160200191610afe565b820191906000526020600020905b815481529060010190602001808311610ae157829003601f168201915b505050505081565b601060009054906101000a900460ff16151515610b2257600080fd5b6001601060006101000a81548160ff021916908315150217905550600a5442111515610b4d57600080fd5b600b544211151515610b5e57600080fd5b600d60009054906101000a900460ff16151515610b7a57600080fd5b610b82610fe3565b6000601060006101000a81548160ff021916908315150217905550565b601060009054906101000a900460ff16151515610bbb57600080fd5b6001601060006101000a81548160ff021916908315150217905550600a5442111515610be657600080fd5b600d60009054906101000a900460ff1680610c025750600b5442115b1515610c0d57600080fd5b600d60019054906101000a900460ff161580610c2a5750600b5442115b1515610c3557600080fd5b6000610c4033610e95565b111515610c4c57600080fd5b6000610c5733610e95565b90506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ce4573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601060006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610dd057600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610e6157fe5b049050809350505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60029054906101000a900460ff1615610eb55760009050610ef8565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b600e6020528060005260406000206000915090505481565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600d60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b600f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6040805190810160405280600581526020017f302e342e3000000000000000000000000000000000000000000000000000000081525081565b6000610fed6112c9565b600d60018294508391906101000a81548160ff02191690831515021790555050508015156112c6576001600d60006101000a81548160ff021916908315150217905550600d60019054906101000a900460ff16156112c55760003073ffffffffffffffffffffffffffffffffffffffff1631905060006003805490509050600080905060008090505b600183038110156111e157600060038281548110151561109257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff16880281151561113457fe5b04905080850194508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611182573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050611076565b506000818403905060006003600185038154811015156111fd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611270573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d602081101561138757600080fd5b8101908080519060200190929190505050156114df576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561143057600080fd5b505afa158015611444573d6000803e3d6000fd5b505050506040513d602081101561145a57600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001028114156114a55760008092509250506114e8565b600460149054906101000a900460ff16156114cd5760006001028114600092509250506114e8565b600180028114600092509250506114e8565b60006001915091505b909156fea165627a7a723058203c37a0d1b80c6a3b976324cc6d5a5a4c92771fc82bcc6d958097f235e9612daa0029","sourceMap":"56:6675:0:-;;;1347:5;1316:36;;;;;;;;;;;;;;;;;;;;1506:1368;8:9:-1;5:2;;;30:1;27;20:12;5:2;1506:1368:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1506:1368:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1506:1368:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1506:1368:0;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1506:1368:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1878:7;:14;1854:13;:20;:38;1846:47;;;;;;;;1903:11;1917:13;:20;1903:34;;1952:6;1961:1;1952:10;;1947:282;1968:6;1964:1;:10;1947:282;;;1995:19;2017:13;2031:1;2017:16;;;;;;;;;;;;;;;;;;1995:38;;2047:12;2065:3;2047:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2047:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2104:1;2091:7;2099:1;2091:10;;;;;;;;;;;;;;;;;;:14;;;2083:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2172:7;2180:1;2172:10;;;;;;;;;;;;;;;;;;2155:9;:14;2165:3;2155:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2208:7;2216:1;2208:10;;;;;;;;;;;;;;;;;;2196:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1947:282;1976:3;;;;;;;1947:282;;;;2254:14;2238:13;;:30;;;;;;;;;;;;;;;;;;2294:14;2278:13;;:30;;;;;;;;;;;;;;;;;;2347:14;2318:12;;:44;;;;;;;;;;;;;;;;;;2383:9;2372:8;:20;;;;;;;;;;;;:::i;:::-;;2415:11;2402:10;;:24;;;;;;;;;;;;;;;;;;2446:8;2436:7;:18;;;;2483:17;2464:16;:36;;;;2523:12;;;;;;;;;;;:24;;;2548:1;2551:8;2561:10;;;;;;;;;;;2580:7;;2597:16;;2616:1;2523:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2523:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2523:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2523:95:0;;;;;;;;;;;;;;;;2510:10;:108;;;;2641:11;2628:10;;:24;;;;;;;;;;;;;;;;;;2709:8;2690:16;;:27;2662:25;:55;;;;2783:8;2755:25;;:36;2727:25;:64;;;;2820:5;2801:16;;:24;;;;;;;;;;;;;;;;;;2862:5;2835:24;;:32;;;;;;;;;;;;;;;;;;1506:1368;;;;;;;;;;56:6675;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\n\ncontract CharityChallenge {\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    string public constant VERSION = \"0.4.0\";\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    address public marketAddress;\n\n    bool public unlockOnNo;\n\n    IRealityCheck realityCheck;\n\n    string public question;\n\n    address public arbitrator;\n\n    uint256 public timeout;\n\n    bytes32 public questionId;\n\n    uint256 public challengeEndTime;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\n    bool public isEventFinalized;\n\n    // hasChallengeAccomplished will be set to true if we got the expected\n    // result that allow to unlock the funds.\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        bool _unlockOnNo\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        uint length = _npoAddresses.length;\n        for (uint i = 0; i < length; i++) {\n            address payable npo = _npoAddresses[i];\n            npoAddresses.push(npo);\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\n            npoRatios[npo] = _ratios[i];\n            sumRatio += _ratios[i];\n        }\n        contractOwner = _contractOwner;\n        marketAddress = _marketAddress;\n        realityCheck = IRealityCheck(_marketAddress);\n        question = _question;\n        arbitrator = _arbitrator;\n        timeout = _timeout;\n        challengeEndTime = _challengeEndTime;\n        questionId = realityCheck.askQuestion(0, question, arbitrator, uint32(timeout), uint32(challengeEndTime), 0);\n        unlockOnNo = _unlockOnNo;\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalized = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n            donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalized);\n        doFinalize();\n    }\n\n    function doFinalize() private {\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkRealitio();\n        if (!hasError) {\n            isEventFinalized = true;\n            if (hasChallengeAccomplished) {\n                uint256 totalContractBalance = address(this).balance;\n                uint length = npoAddresses.length;\n                uint256 donatedAmount = 0;\n                for (uint i = 0; i < length - 1; i++) {\n                    address payable npo = npoAddresses[i];\n                    uint8 ratio = npoRatios[npo];\n                    uint256 amount = totalContractBalance * ratio / sumRatio;\n                    donatedAmount += amount;\n                    npo.transfer(amount);\n                    emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 remainingAmount = totalContractBalance - donatedAmount;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(remainingAmount);\n                emit Donated(npo, remainingAmount);\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n        require(npoRatios[_npo] > 0);\n        uint256 totalContractBalance = address(this).balance;\n        uint8 ratio = npoRatios[_npo];\n        uint256 amount = totalContractBalance * ratio / sumRatio;\n        return amount;\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkRealitio() private view returns (bool happened, bool errored) {\n        if (realityCheck.isFinalized(questionId)) {\n            bytes32 answer = realityCheck.getFinalAnswer(questionId);\n            if (answer == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                // Treat 'invalid' outcome as 'no'\n                // because 'invalid' is one of the valid outcomes\n                return (false, false);\n            } else {\n                if (unlockOnNo) {\n                    return (answer == 0x0000000000000000000000000000000000000000000000000000000000000000, false);\n                }\n                return (answer == 0x0000000000000000000000000000000000000000000000000000000000000001, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"MarketMock":{"abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isInvalid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_invalid","type":"bool"}],"name":"setInvalid","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint32[2]"}],"name":"setPayoutNumerators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"setEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061045c806100206000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304be2f501461009357806320b27291146100c257806329085679146100ff5780633c2648201461013c578063439f5ac21461018b578063467791bf146101b65780638d4e408314610228578063ccb98ffc14610257575b600080fd5b34801561009f57600080fd5b506100a8610292565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100fd600480360360208110156100e557600080fd5b810190808035151590602001909291905050506102a8565b005b34801561010b57600080fd5b5061013a6004803603602081101561012257600080fd5b810190808035151590602001909291905050506102c4565b005b34801561014857600080fd5b506101756004803603602081101561015f57600080fd5b81019080803590602001909291905050506102e1565b6040518082815260200191505060405180910390f35b34801561019757600080fd5b506101a061031b565b6040518082815260200191505060405180910390f35b3480156101c257600080fd5b50610226600480360360408110156101d957600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610325565b005b34801561023457600080fd5b5061023d61033a565b604051808215151515815260200191505060405180910390f35b34801561026357600080fd5b506102906004803603602081101561027a57600080fd5b8101908080359060200190929190505050610350565b005b60008060019054906101000a900460ff16905090565b806000806101000a81548160ff02191690831515021790555050565b80600060016101000a81548160ff02191690831515021790555050565b60006001826002811015156102f257fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff169050919050565b6000600254905090565b80600190600261033692919061035a565b5050565b60008060009054906101000a900460ff16905090565b8060028190555050565b8260026007016008900481019282156103ec5791602002820160005b838211156103ba57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610376565b80156103ea5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026103ba565b505b5090506103f991906103fd565b5090565b61042d91905b8082111561042957600081816101000a81549063ffffffff021916905550600101610403565b5090565b9056fea165627a7a72305820b33ca75409aace7fcb33975fe75fe01388b9e3fe4f0f11ce8f796162c8e9db850029","sourceMap":"50:960:2:-;;;179:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;179:28:2;50:960;;;;;;","source":"pragma solidity ^0.5.0;\n\nimport \"./IMarket.sol\";\n\ncontract MarketMock is IMarket {\n    bool finalized;\n    bool invalid;\n    uint32[2] payoutNumerators;\n    uint256 endTime;\n\n    constructor() public {\n    }\n\n    function isFinalized() public view returns (bool) {\n        return finalized;\n    }\n    \n    function isInvalid() public view returns (bool) {\n        return invalid;\n    }\n\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256) {\n        return payoutNumerators[_outcome];\n    }\n\n    function getEndTime() public view returns (uint256) {\n        return endTime;\n    }\n    \n    function setFinalized(bool _finalized) public {\n        finalized = _finalized;\n    }\n\n    function setInvalid(bool _invalid) public {\n        invalid = _invalid;\n    }\n\n    function setPayoutNumerators(uint32[2] memory _payoutNumerators) public {\n        payoutNumerators = _payoutNumerators;\n    }\n\n    function setEndTime(uint256 _endTime) public {\n        endTime = _endTime;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601060006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001f1f38038062001f1f83398101806040526101208110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b50509291906020018051906020019092919080519060200190929190805190602001909291908051906020019092919050505088888888888888888886518851141515620001a657600080fd5b60008851905060008090505b81811015620003965760008a82815181101515620001cc57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008a838151811015156200024f57fe5b9060200190602002015160ff16111515620002d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8982815181101515620002e157fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555089828151811015156200035157fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001b2565b50896000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600690805190602001906200047192919062000737565b5084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360088190555082600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff168152602001838152602001828103825287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620006485780601f106200061c5761010080835404028352916020019162000648565b820191906000526020600020905b8154815290600101906020018083116200062a57829003601f168201915b5050975050505050505050602060405180830381600087803b1580156200066e57600080fd5b505af115801562000683573d6000803e3d6000fd5b505050506040513d60208110156200069a57600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600b819055506301dfe200600b5401600c819055506000600d60006101000a81548160ff0219169083151502179055506000600d60016101000a81548160ff02191690831515021790555050505050505050505050505050505050505050620007e6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200077a57805160ff1916838001178555620007ab565b82800160010185558215620007ab579182015b82811115620007aa5782518255916020019190600101906200078d565b5b509050620007ba9190620007be565b5090565b620007e391905b80821115620007df576000816000905550600101620007c5565b5090565b90565b61172980620007f66000396000f3fe608060405260043610610183576000357c0100000000000000000000000000000000000000000000000000000000900480637b8c8de1116100ee578063bc3fde4e116100a7578063ce606ee011610081578063ce606ee014610819578063d87a328a14610870578063dfc39d771461089b578063ffa1ad74146108d657610183565b8063bc3fde4e14610788578063c407670f146107b3578063c8e12f14146107de57610183565b80637b8c8de114610618578063877303091461067d57806395623641146106a8578063b06a5c52146106ff578063b77309d61461072a578063ba7fd2fb1461075957610183565b80635ead3d4b116101405780635ead3d4b146104265780635f95eb4d146104915780636cc6cde1146104f657806370a082311461054d57806370dea79a146105b2578063770bd0e3146105dd57610183565b806307171d7f146102a75780630ed7e499146102be578063306a7ce0146103395780633fad9ae0146103685780634bb278f3146103f85780634e71d92d1461040f575b600a54421115151561019457600080fd5b6000341115156101a357600080fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101f25750600034115b1561020a57600f600081548092919060010191905055505b34600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b3480156102b357600080fd5b506102bc610966565b005b3480156102ca57600080fd5b506102f7600480360360208110156102e157600080fd5b8101908080359060200190929190505050610af9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034557600080fd5b5061034e610b37565b604051808215151515815260200191505060405180910390f35b34801561037457600080fd5b5061037d610b4a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bd5780820151818401526020810190506103a2565b50505050905090810190601f1680156103ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040457600080fd5b5061040d610be8565b005b34801561041b57600080fd5b50610424610c81565b005b34801561043257600080fd5b506104756004803603602081101561044957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e33565b604051808260ff1660ff16815260200191505060405180910390f35b34801561049d57600080fd5b506104e0600480360360208110156104b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e53565b6040518082815260200191505060405180910390f35b34801561050257600080fd5b5061050b610f51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055957600080fd5b5061059c6004803603602081101561057057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f77565b6040518082815260200191505060405180910390f35b3480156105be57600080fd5b506105c7610fdf565b6040518082815260200191505060405180910390f35b3480156105e957600080fd5b506106166004803603602081101561060057600080fd5b8101908080359060200190929190505050610fe5565b005b34801561062457600080fd5b506106676004803603602081101561063b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061104a565b6040518082815260200191505060405180910390f35b34801561068957600080fd5b50610692611062565b6040518082815260200191505060405180910390f35b3480156106b457600080fd5b506106bd611068565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070b57600080fd5b5061071461108e565b6040518082815260200191505060405180910390f35b34801561073657600080fd5b5061073f611094565b604051808215151515815260200191505060405180910390f35b34801561076557600080fd5b5061076e6110a7565b604051808215151515815260200191505060405180910390f35b34801561079457600080fd5b5061079d6110ba565b6040518082815260200191505060405180910390f35b3480156107bf57600080fd5b506107c86110c0565b6040518082815260200191505060405180910390f35b3480156107ea57600080fd5b506108176004803603602081101561080157600080fd5b81019080803590602001909291905050506110c6565b005b34801561082557600080fd5b5061082e61112b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087c57600080fd5b50610885611150565b6040518082815260200191505060405180910390f35b3480156108a757600080fd5b506108d4600480360360208110156108be57600080fd5b8101908080359060200190929190505050611156565b005b3480156108e257600080fd5b506108eb6111bb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561092b578082015181840152602081019050610910565b50505050905090810190601f1680156109585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600c544211151561097657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d157600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600d60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610a86573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610b0857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610be05780601f10610bb557610100808354040283529160200191610be0565b820191906000526020600020905b815481529060010190602001808311610bc357829003601f168201915b505050505081565b601060009054906101000a900460ff16151515610c0457600080fd5b6001601060006101000a81548160ff021916908315150217905550600a5442111515610c2f57600080fd5b600b544211151515610c4057600080fd5b600d60009054906101000a900460ff16151515610c5c57600080fd5b610c646111f4565b6000601060006101000a81548160ff021916908315150217905550565b601060009054906101000a900460ff16151515610c9d57600080fd5b6001601060006101000a81548160ff021916908315150217905550600a5442111515610cc857600080fd5b600d60009054906101000a900460ff1680610ce45750600b5442115b1515610cef57600080fd5b600d60019054906101000a900460ff161580610d0c5750600b5442115b1515610d1757600080fd5b6000610d2233610f77565b111515610d2e57600080fd5b6000610d3933610f77565b90506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610dc6573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601060006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610eb257600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff168402811515610f4357fe5b049050809350505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60029054906101000a900460ff1615610f975760009050610fda565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104057600080fd5b80600a8190555050565b600e6020528060005260406000206000915090505481565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600d60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b600f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112157600080fd5b80600b8190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b157600080fd5b80600c8190555050565b6040805190810160405280600581526020017f302e342e3000000000000000000000000000000000000000000000000000000081525081565b60006111fe6114da565b600d60018294508391906101000a81548160ff02191690831515021790555050508015156114d7576001600d60006101000a81548160ff021916908315150217905550600d60019054906101000a900460ff16156114d65760003073ffffffffffffffffffffffffffffffffffffffff1631905060006003805490509050600080905060008090505b600183038110156113f25760006003828154811015156112a357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600260009054906101000a900460ff1660ff168260ff16880281151561134557fe5b04905080850194508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611393573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050611287565b5060008184039050600060036001850381548110151561140e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611481573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505050505b5b50565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561156e57600080fd5b505afa158015611582573d6000803e3d6000fd5b505050506040513d602081101561159857600080fd5b8101908080519060200190929190505050156116f0576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d602081101561166b57600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001028114156116b65760008092509250506116f9565b600460149054906101000a900460ff16156116de5760006001028114600092509250506116f9565b600180028114600092509250506116f9565b60006001915091505b909156fea165627a7a7230582088f553d9cd7a90b851510899592265d2582723b51b91de3a4dea01fa921450e20029","sourceMap":"59:1328:4:-;;;1347:5:0;1316:36;;;;;;;;;;;;;;;;;;;;119:545:4;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:545:4;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:545:4;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:545:4;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:545:4;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;119:545:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;464:14;488:13;511:7;528:14;552:9;571:11;592:8;610:17;637:11;1878:7:0;:14;1854:13;:20;:38;1846:47;;;;;;;;1903:11;1917:13;:20;1903:34;;1952:6;1961:1;1952:10;;1947:282;1968:6;1964:1;:10;1947:282;;;1995:19;2017:13;2031:1;2017:16;;;;;;;;;;;;;;;;;;1995:38;;2047:12;2065:3;2047:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2047:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2104:1;2091:7;2099:1;2091:10;;;;;;;;;;;;;;;;;;:14;;;2083:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2172:7;2180:1;2172:10;;;;;;;;;;;;;;;;;;2155:9;:14;2165:3;2155:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2208:7;2216:1;2208:10;;;;;;;;;;;;;;;;;;2196:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1947:282;1976:3;;;;;;;1947:282;;;;2254:14;2238:13;;:30;;;;;;;;;;;;;;;;;;2294:14;2278:13;;:30;;;;;;;;;;;;;;;;;;2347:14;2318:12;;:44;;;;;;;;;;;;;;;;;;2383:9;2372:8;:20;;;;;;;;;;;;:::i;:::-;;2415:11;2402:10;;:24;;;;;;;;;;;;;;;;;;2446:8;2436:7;:18;;;;2483:17;2464:16;:36;;;;2523:12;;;;;;;;;;;:24;;;2548:1;2551:8;2561:10;;;;;;;;;;;2580:7;;2597:16;;2616:1;2523:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2523:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2523:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2523:95:0;;;;;;;;;;;;;;;;2510:10;:108;;;;2641:11;2628:10;;:24;;;;;;;;;;;;;;;;;;2709:8;2690:16;;:27;2662:25;:55;;;;2783:8;2755:25;;:36;2727:25;:64;;;;2820:5;2801:16;;:24;;;;;;;;;;;;;;;;;;2862:5;2835:24;;:32;;;;;;;;;;;;;;;;;;1506:1368;;;;;;;;;;119:545:4;;;;;;;;;59:1328;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        bool _unlockOnNo\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress,\n        _question,\n        _arbitrator,\n        _timeout,\n        _challengeEndTime,\n        _unlockOnNo\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"}};