module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"npoLength","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contributedAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[],"name":"Failed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"checkRealitio","outputs":[{"name":"happened","type":"bool"},{"name":"errored","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"0x60806040526000601260006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620022323803806200223283398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b5050929190602001805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505087518951141515620001a757600080fd5b612710600b54101515620001ba57600080fd5b8851600460006101000a81548160ff021916908360ff16021790555060008090505b600460009054906101000a900460ff1660ff168160ff161015620003e15760008a8260ff168151811015156200020e57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008a8360ff168151811015156200029457fe5b9060200190602002015160ff1611151562000317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b898260ff168151811015156200032957fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550898260ff168151811015156200039c57fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001dc565b50896000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560069080519060200190620004bc92919062000780565b5084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360088190555082600a8190555081600b81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018381526020018281038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200069a5780601f106200066e576101008083540402835291602001916200069a565b820191906000526020600020905b8154815290600101906020018083116200067c57829003601f168201915b5050975050505050505050602060405180830381600087803b158015620006c057600080fd5b505af1158015620006d5573d6000803e3d6000fd5b505050506040513d6020811015620006ec57600080fd5b810190808051906020019092919050505060098190555080600460156101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff021916908315150217905550505050505050505050506200082f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007c357805160ff1916838001178555620007f4565b82800160010185558215620007f4579182015b82811115620007f3578251825591602001919060010190620007d6565b5b50905062000803919062000807565b5090565b6200082c91905b80821115620008285760008160009055506001016200080e565b5090565b90565b6119f3806200083f6000396000f3fe60806040526004361061019e576000357c01000000000000000000000000000000000000000000000000000000009004806387730309116100ee578063bc3fde4e116100a7578063d87a328a11610081578063d87a328a14610890578063db1a6eaa146108bb578063fc741c7c146108e6578063ffa1ad74146109115761019e565b8063bc3fde4e146107e3578063c407670f1461080e578063ce606ee0146108395761019e565b8063877303091461069e57806395623641146106c9578063a6a205c014610720578063b06a5c521461075a578063b77309d614610785578063ba7fd2fb146107b45761019e565b806353240f641161015b5780636cc6cde1116101355780636cc6cde11461055257806370a08231146105a957806370dea79a1461060e5780637b8c8de1146106395761019e565b806353240f64146104515780635ead3d4b146104825780635f95eb4d146104ed5761019e565b806307171d7f146102d25780630ed7e499146102e9578063306a7ce0146103645780633fad9ae0146103935780634bb278f3146104235780634e71d92d1461043a575b600a5442111515156101af57600080fd5b6000341115156101be57600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561020d5750600034115b15610225576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550346011600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b3480156102de57600080fd5b506102e76109a1565b005b3480156102f557600080fd5b506103226004803603602081101561030c57600080fd5b8101908080359060200190929190505050610b34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037057600080fd5b50610379610b72565b604051808215151515815260200191505060405180910390f35b34801561039f57600080fd5b506103a8610b85565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e85780820151818401526020810190506103cd565b50505050905090810190601f1680156104155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042f57600080fd5b50610438610c23565b005b34801561044657600080fd5b5061044f610cbc565b005b34801561045d57600080fd5b50610466610e6e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561048e57600080fd5b506104d1600480360360208110156104a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e81565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104f957600080fd5b5061053c6004803603602081101561051057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ea1565b6040518082815260200191505060405180910390f35b34801561055e57600080fd5b50610567611001565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105b557600080fd5b506105f8600480360360208110156105cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611027565b6040518082815260200191505060405180910390f35b34801561061a57600080fd5b5061062361108f565b6040518082815260200191505060405180910390f35b34801561064557600080fd5b506106886004803603602081101561065c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611095565b6040518082815260200191505060405180910390f35b3480156106aa57600080fd5b506106b36110ad565b6040518082815260200191505060405180910390f35b3480156106d557600080fd5b506106de6110b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072c57600080fd5b506107356110d9565b6040518083151515158152602001821515151581526020019250505060405180910390f35b34801561076657600080fd5b5061076f6112fc565b6040518082815260200191505060405180910390f35b34801561079157600080fd5b5061079a611302565b604051808215151515815260200191505060405180910390f35b3480156107c057600080fd5b506107c9611315565b604051808215151515815260200191505060405180910390f35b3480156107ef57600080fd5b506107f8611328565b6040518082815260200191505060405180910390f35b34801561081a57600080fd5b5061082361132e565b6040518082815260200191505060405180910390f35b34801561084557600080fd5b5061084e611334565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089c57600080fd5b506108a5611359565b6040518082815260200191505060405180910390f35b3480156108c757600080fd5b506108d061135f565b6040518082815260200191505060405180910390f35b3480156108f257600080fd5b506108fb611365565b6040518082815260200191505060405180910390f35b34801561091d57600080fd5b5061092661136b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096657808201518184015260208101905061094b565b50505050905090810190601f1680156109935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d54421115156109b157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0c57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610ac1573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610b4357fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c1b5780601f10610bf057610100808354040283529160200191610c1b565b820191906000526020600020905b815481529060010190602001808311610bfe57829003601f168201915b505050505081565b601260009054906101000a900460ff16151515610c3f57600080fd5b6001601260006101000a81548160ff021916908315150217905550600a5442111515610c6a57600080fd5b600c544211151515610c7b57600080fd5b600e60009054906101000a900460ff16151515610c9757600080fd5b610c9f6113a4565b6000601260006101000a81548160ff021916908315150217905550565b601260009054906101000a900460ff16151515610cd857600080fd5b6001601260006101000a81548160ff021916908315150217905550600a5442111515610d0357600080fd5b600e60009054906101000a900460ff1680610d1f5750600c5442115b1515610d2a57600080fd5b600e60019054906101000a900460ff161580610d475750600c5442115b1515610d5257600080fd5b6000610d5d33611027565b111515610d6957600080fd5b6000610d7433611027565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e01573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601260006101000a81548160ff021916908315150217905550565b600460009054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610f0057600080fd5b6000610f6b610f45612710610f37600b543073ffffffffffffffffffffffffffffffffffffffff16316117fe90919063ffffffff16565b61188890919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff163161191b90919063ffffffff16565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050610ff8600260009054906101000a900460ff1660ff16610fea8360ff16856117fe90919063ffffffff16565b61188890919063ffffffff16565b92505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff1615611047576000905061108a565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b600f6020528060005260406000206000915090505481565b600c5481565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d602081101561119757600080fd5b8101908080519060200190929190505050156112ef576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d602081101561126a57600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001028114156112b55760008092509250506112f8565b600460159054906101000a900460ff16156112dd5760006001028114600092509250506112f8565b600180028114600092509250506112f8565b60006001915091505b9091565b60095481565b600e60009054906101000a900460ff1681565b600460159054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60115481565b600b5481565b6040805190810160405280600581526020017f302e342e3100000000000000000000000000000000000000000000000000000081525081565b60006113ae6110d9565b600e60018294508391906101000a81548160ff02191690831515021790555050508015156117fb576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff16156117cd57600060038054905090506000600b54111561153857600061145d61271061144f600b543073ffffffffffffffffffffffffffffffffffffffff16316117fe90919063ffffffff16565b61188890919063ffffffff16565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114c6573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b60008090505b600182038110156116d257600060038281548110151561155a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600061162b600260009054906101000a900460ff1660ff1661161d8460ff163073ffffffffffffffffffffffffffffffffffffffff16316117fe90919063ffffffff16565b61188890919063ffffffff16565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611673573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a2505050808060010191505061153e565b5060003073ffffffffffffffffffffffffffffffffffffffff16319050600060036001840381548110151561170357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611776573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a25050506117fa565b7f625a40e68d9554793bf647bf32e4885e7f15bd1bfac262906cc7d26f376f20a260405160405180910390a15b5b50565b6000808314156118115760009050611882565b6000828402905082848281151561182457fe5b0414151561187d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806119a76021913960400191505060405180910390fd5b809150505b92915050565b60008082111515611901576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481151561190e57fe5b0490508091505092915050565b6000828211151515611995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058200ff5c62840038d257353c0f8fda36e5736f35493e4b42caaa4b683ad56f4fa780029","sourceMap":"81:7354:0:-;;;1784:5;1753:36;;;;;;;;;;;;;;;;;;;;1943:1474;8:9:-1;5:2;;;30:1;27;20:12;5:2;1943:1474:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1943:1474:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1943:1474:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1943:1474:0;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1943:1474:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2342:7;:14;2318:13;:20;:38;2310:47;;;;;;;;1741:5;2375:8;;:21;2367:30;;;;;;;;2425:13;:20;2407:9;;:39;;;;;;;;;;;;;;;;;;2461:7;2471:1;2461:11;;2456:286;2478:9;;;;;;;;;;;2474:13;;:1;:13;;;2456:286;;;2508:19;2530:13;2544:1;2530:16;;;;;;;;;;;;;;;;;;;;2508:38;;2560:12;2578:3;2560:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2560:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2617:1;2604:7;2612:1;2604:10;;;;;;;;;;;;;;;;;;;;:14;;;2596:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2685:7;2693:1;2685:10;;;;;;;;;;;;;;;;;;;;2668:9;:14;2678:3;2668:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2721:7;2729:1;2721:10;;;;;;;;;;;;;;;;;;;;2709:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:286;2489:3;;;;;;;2456:286;;;;2767:14;2751:13;;:30;;;;;;;;;;;;;;;;;;2807:14;2791:13;;:30;;;;;;;;;;;;;;;;;;2860:14;2831:12;;:44;;;;;;;;;;;;;;;;;;2896:9;2885:8;:20;;;;;;;;;;;;:::i;:::-;;2928:11;2915:10;;:24;;;;;;;;;;;;;;;;;;2959:8;2949:7;:18;;;;2996:17;2977:16;:36;;;;3034:9;3023:8;:20;;;;3066:12;;;;;;;;;;;:24;;;3091:1;3094:8;3104:10;;;;;;;;;;;3123:7;;3140:16;;3159:1;3066:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3066:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3066:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3066:95:0;;;;;;;;;;;;;;;;3053:10;:108;;;;3184:11;3171:10;;:24;;;;;;;;;;;;;;;;;;3252:8;3233:16;;:27;3205:25;:55;;;;3326:8;3298:25;;:36;3270:25;:64;;;;3363:5;3344:16;;:24;;;;;;;;;;;;;;;;;;3405:5;3378:24;;:32;;;;;;;;;;;;;;;;;;1943:1474;;;;;;;;;;81:7354;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\nimport \"./SafeMath.sol\";\n\ncontract CharityChallenge {\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Failed();\n\n    event Fee(address indexed maker, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    string public constant VERSION = \"0.4.1\";\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    uint8 public npoLength;\n\n    address public marketAddress;\n\n    bool public unlockOnNo;\n\n    IRealityCheck realityCheck;\n\n    string public question;\n\n    address public arbitrator;\n\n    uint256 public timeout;\n\n    bytes32 public questionId;\n\n    uint256 public challengeEndTime;\n\n    // For a fee of 10.5%, pass 1050\n    uint256 public makerFee;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\n    bool public isEventFinalized;\n\n    // hasChallengeAccomplished will be set to true if we got the expected\n    // result that allow to unlock the funds.\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    uint256 public contributedAmount;\n\n    // We use a divider of 10000 instead of 100 to have more granularity for\n    // the maker fee\n    uint256 constant feeDivider = 10000;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint256 _makerFee,\n        bool _unlockOnNo\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        require(makerFee < feeDivider);\n        npoLength = uint8(_npoAddresses.length);\n        for (uint8 i = 0; i < npoLength; i++) {\n            address payable npo = _npoAddresses[i];\n            npoAddresses.push(npo);\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\n            npoRatios[npo] = _ratios[i];\n            sumRatio += _ratios[i];\n        }\n        contractOwner = _contractOwner;\n        marketAddress = _marketAddress;\n        realityCheck = IRealityCheck(_marketAddress);\n        question = _question;\n        arbitrator = _arbitrator;\n        timeout = _timeout;\n        challengeEndTime = _challengeEndTime;\n        makerFee = _makerFee;\n        questionId = realityCheck.askQuestion(0, question, arbitrator, uint32(timeout), uint32(challengeEndTime), 0);\n        unlockOnNo = _unlockOnNo;\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalized = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n            donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        contributedAmount += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalized);\n        doFinalize();\n    }\n\n    function doFinalize() private {\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkRealitio();\n        if (!hasError) {\n            isEventFinalized = true;\n            if (hasChallengeAccomplished) {\n                uint length = npoAddresses.length;\n                if (makerFee > 0) {\n                    uint256 amount = address(this).balance.mul(makerFee).div(feeDivider);\n                    contractOwner.transfer(amount);\n                    emit Fee(contractOwner, amount);\n                }\n                for (uint i = 0; i < length - 1; i++) {\n                    address payable npo = npoAddresses[i];\n                    uint8 ratio = npoRatios[npo];\n                    uint256 amount = address(this).balance.mul(ratio).div(sumRatio);\n                    npo.transfer(amount);\n                    emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 amount = address(this).balance;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(amount);\n                emit Donated(npo, amount);\n            } else {\n                emit Failed();\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n        require(npoRatios[_npo] > 0);\n        uint256 amountForNPO = address(this).balance.sub(address(this).balance.mul(makerFee).div(feeDivider));\n        uint8 ratio = npoRatios[_npo];\n        return amountForNPO.mul(ratio).div(sumRatio);\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkRealitio() public view returns (bool happened, bool errored) {\n        if (realityCheck.isFinalized(questionId)) {\n            bytes32 answer = realityCheck.getFinalAnswer(questionId);\n            if (answer == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                // Treat 'invalid' outcome as 'no'\n                // because 'invalid' is one of the valid outcomes\n                return (false, false);\n            } else {\n                if (unlockOnNo) {\n                    return (answer == 0x0000000000000000000000000000000000000000000000000000000000000000, false);\n                }\n                return (answer == 0x0000000000000000000000000000000000000000000000000000000000000001, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"RealityCheckMock":{"abi":[{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"questions","outputs":[{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"name":"template_id","type":"uint256"},{"name":"question","type":"string"},{"name":"arbitrator","type":"address"},{"name":"timeout","type":"uint32"},{"name":"opening_ts","type":"uint32"},{"name":"nonce","type":"uint256"}],"name":"askQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getFinalAnswer","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getOpeningTS","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"name":"addQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalAnswer","type":"bytes32"}],"name":"setFinalAnswer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061061e806100206000396000f3fe608060405260043610610098576000357c0100000000000000000000000000000000000000000000000000000000900480638923e5461161006b5780638923e546146102cf57806395addb90146103145780639e63fa6a14610381578063a462fb7b146103dc57610098565b806309f709721461009d578063762c38fd146100e4578063768e8fc5146102145780637f8d429e1461027c575b600080fd5b3480156100a957600080fd5b506100e2600480360360408110156100c057600080fd5b810190808035906020019092919080351515906020019092919050505061042b565b005b3480156100f057600080fd5b506101fe600480360360c081101561010757600080fd5b81019080803590602001909291908035906020019064010000000081111561012e57600080fd5b82018360208201111561014057600080fd5b8035906020019184600183028401116401000000008311171561016257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190803563ffffffff1690602001909291908035906020019092919050505061045c565b6040518082815260200191505060405180910390f35b6102666004803603608081101561022a57600080fd5b8101908080359060200190929190803563ffffffff1690602001909291908035151590602001909291908035906020019092919050505061048e565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b506102b56004803603602081101561029f57600080fd5b8101908080359060200190929190505050610513565b604051808215151515815260200191505060405180910390f35b3480156102db57600080fd5b50610312600480360360408110156102f257600080fd5b81019080803590602001909291908035906020019092919050505061053f565b005b34801561032057600080fd5b5061034d6004803603602081101561033757600080fd5b810190808035906020019092919050505061055d565b604051808463ffffffff1663ffffffff16815260200183151515158152602001828152602001935050505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b81019080803590602001909291905050506105a4565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156103e857600080fd5b50610415600480360360208110156103ff57600080fd5b81019080803590602001909291905050506105d3565b6040518082815260200191505060405180910390f35b8060008084815260200190815260200160002060000160046101000a81548160ff0219169083151502179055505050565b60007fafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be60010290509695505050505050565b60008360008087815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055508260008087815260200190815260200160002060000160046101000a81548160ff0219169083151502179055508160008087815260200190815260200160002060010181905550949350505050565b600080600083815260200190815260200160002060000160049054906101000a900460ff169050919050565b80600080848152602001908152602001600020600101819055505050565b60006020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060010154905083565b600080600083815260200190815260200160002060000160009054906101000a900463ffffffff169050919050565b600080600083815260200190815260200160002060010154905091905056fea165627a7a72305820c44daa9a253017fbbaea5405800b6a6489bedc0258d371bffc1dfca47429d4ad0029","sourceMap":"56:1513:3:-;;;266:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;266:28:3;56:1513;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\n\ncontract RealityCheckMock is IRealityCheck {\n    struct Question {\n        uint32 opening_ts;\n        bool finalized;\n        bytes32 finalAnswer;\n    }\n\n    mapping(bytes32 => Question) public questions;\n\n    constructor() public {\n    }\n\n    function askQuestion(\n        uint256 template_id, string memory question,\n        address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) public returns (bytes32) {\n\n        return 0xafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be;\n    }\n\n    function isFinalized(bytes32 question_id) public view returns (bool) {\n        return questions[question_id].finalized;\n    }\n\n    function getFinalAnswer(bytes32 question_id) public view returns (bytes32) {\n        return questions[question_id].finalAnswer;\n    }\n\n    function getOpeningTS(bytes32 question_id) public view returns (uint32) {\n        return questions[question_id].opening_ts;\n    }\n\n    function addQuestion(bytes32 question_id, uint32 opening_ts, bool finalized, bytes32 finalAnswer)\n    public payable returns (bytes32) {\n        questions[question_id].opening_ts = opening_ts;\n        questions[question_id].finalized = finalized;\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n\n    function setFinalized(bytes32 question_id, bool finalized) public {\n        questions[question_id].finalized = finalized;\n    }\n\n    function setFinalAnswer(bytes32 question_id, bytes32 finalAnswer) public {\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"npoLength","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"checkRealitio","outputs":[{"name":"happened","type":"bool"},{"name":"errored","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contributedAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[],"name":"Failed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601260006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620024673803806200246783398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b505092919060200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508989898989898989898987518951141515620001b157600080fd5b612710600b54101515620001c457600080fd5b8851600460006101000a81548160ff021916908360ff16021790555060008090505b600460009054906101000a900460ff1660ff168160ff161015620003eb5760008a8260ff168151811015156200021857fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008a8360ff168151811015156200029e57fe5b9060200190602002015160ff1611151562000321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b898260ff168151811015156200033357fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550898260ff16815181101515620003a657fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001e6565b50896000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560069080519060200190620004c692919062000794565b5084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360088190555082600a8190555081600b81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff168152602001838152602001828103825287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620006a45780601f106200067857610100808354040283529160200191620006a4565b820191906000526020600020905b8154815290600101906020018083116200068657829003601f168201915b5050975050505050505050602060405180830381600087803b158015620006ca57600080fd5b505af1158015620006df573d6000803e3d6000fd5b505050506040513d6020811015620006f657600080fd5b810190808051906020019092919050505060098190555080600460156101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff021916908315150217905550505050505050505050505050505050505050505062000843565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007d757805160ff191683800117855562000808565b8280016001018555821562000808579182015b8281111562000807578251825591602001919060010190620007ea565b5b5090506200081791906200081b565b5090565b6200084091905b808211156200083c57600081600090555060010162000822565b5090565b90565b611c1480620008536000396000f3fe6080604052600436106101df576000357c0100000000000000000000000000000000000000000000000000000000900480638773030911610114578063c407670f116100b2578063db1a6eaa11610081578063db1a6eaa14610972578063dfc39d771461099d578063fc741c7c146109d8578063ffa1ad7414610a03576101df565b8063c407670f1461088a578063c8e12f14146108b5578063ce606ee0146108f0578063d87a328a14610947576101df565b8063b06a5c52116100ee578063b06a5c52146107d6578063b77309d614610801578063ba7fd2fb14610830578063bc3fde4e1461085f576101df565b8063877303091461071a5780639562364114610745578063a6a205c01461079c576101df565b80635ead3d4b1161018157806370a082311161015b57806370a08231146105ea57806370dea79a1461064f578063770bd0e31461067a5780637b8c8de1146106b5576101df565b80635ead3d4b146104c35780635f95eb4d1461052e5780636cc6cde114610593576101df565b80633fad9ae0116101bd5780633fad9ae0146103d45780634bb278f3146104645780634e71d92d1461047b57806353240f6414610492576101df565b806307171d7f146103135780630ed7e4991461032a578063306a7ce0146103a5575b600a5442111515156101f057600080fd5b6000341115156101ff57600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561024e5750600034115b15610266576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550346011600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561031f57600080fd5b50610328610a93565b005b34801561033657600080fd5b506103636004803603602081101561034d57600080fd5b8101908080359060200190929190505050610c26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b157600080fd5b506103ba610c64565b604051808215151515815260200191505060405180910390f35b3480156103e057600080fd5b506103e9610c77565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042957808201518184015260208101905061040e565b50505050905090810190601f1680156104565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047057600080fd5b50610479610d15565b005b34801561048757600080fd5b50610490610dae565b005b34801561049e57600080fd5b506104a7610f60565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104cf57600080fd5b50610512600480360360208110156104e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f73565b604051808260ff1660ff16815260200191505060405180910390f35b34801561053a57600080fd5b5061057d6004803603602081101561055157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f93565b6040518082815260200191505060405180910390f35b34801561059f57600080fd5b506105a86110f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f657600080fd5b506106396004803603602081101561060d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611119565b6040518082815260200191505060405180910390f35b34801561065b57600080fd5b50610664611181565b6040518082815260200191505060405180910390f35b34801561068657600080fd5b506106b36004803603602081101561069d57600080fd5b8101908080359060200190929190505050611187565b005b3480156106c157600080fd5b50610704600480360360208110156106d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ec565b6040518082815260200191505060405180910390f35b34801561072657600080fd5b5061072f611204565b6040518082815260200191505060405180910390f35b34801561075157600080fd5b5061075a61120a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a857600080fd5b506107b1611230565b6040518083151515158152602001821515151581526020019250505060405180910390f35b3480156107e257600080fd5b506107eb611453565b6040518082815260200191505060405180910390f35b34801561080d57600080fd5b50610816611459565b604051808215151515815260200191505060405180910390f35b34801561083c57600080fd5b5061084561146c565b604051808215151515815260200191505060405180910390f35b34801561086b57600080fd5b5061087461147f565b6040518082815260200191505060405180910390f35b34801561089657600080fd5b5061089f611485565b6040518082815260200191505060405180910390f35b3480156108c157600080fd5b506108ee600480360360208110156108d857600080fd5b810190808035906020019092919050505061148b565b005b3480156108fc57600080fd5b506109056114f0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095357600080fd5b5061095c611515565b6040518082815260200191505060405180910390f35b34801561097e57600080fd5b5061098761151b565b6040518082815260200191505060405180910390f35b3480156109a957600080fd5b506109d6600480360360208110156109c057600080fd5b8101908080359060200190929190505050611521565b005b3480156109e457600080fd5b506109ed611586565b6040518082815260200191505060405180910390f35b348015610a0f57600080fd5b50610a1861158c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a58578082015181840152602081019050610a3d565b50505050905090810190601f168015610a855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d5442111515610aa357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610afe57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610bb3573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610c3557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0d5780601f10610ce257610100808354040283529160200191610d0d565b820191906000526020600020905b815481529060010190602001808311610cf057829003601f168201915b505050505081565b601260009054906101000a900460ff16151515610d3157600080fd5b6001601260006101000a81548160ff021916908315150217905550600a5442111515610d5c57600080fd5b600c544211151515610d6d57600080fd5b600e60009054906101000a900460ff16151515610d8957600080fd5b610d916115c5565b6000601260006101000a81548160ff021916908315150217905550565b601260009054906101000a900460ff16151515610dca57600080fd5b6001601260006101000a81548160ff021916908315150217905550600a5442111515610df557600080fd5b600e60009054906101000a900460ff1680610e115750600c5442115b1515610e1c57600080fd5b600e60019054906101000a900460ff161580610e395750600c5442115b1515610e4457600080fd5b6000610e4f33611119565b111515610e5b57600080fd5b6000610e6633611119565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ef3573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601260006101000a81548160ff021916908315150217905550565b600460009054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610ff257600080fd5b600061105d611037612710611029600b543073ffffffffffffffffffffffffffffffffffffffff1631611a1f90919063ffffffff16565b611aa990919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff1631611b3c90919063ffffffff16565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506110ea600260009054906101000a900460ff1660ff166110dc8360ff1685611a1f90919063ffffffff16565b611aa990919063ffffffff16565b92505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff1615611139576000905061117c565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e257600080fd5b80600a8190555050565b600f6020528060005260406000206000915090505481565b600c5481565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112c457600080fd5b505afa1580156112d8573d6000803e3d6000fd5b505050506040513d60208110156112ee57600080fd5b810190808051906020019092919050505015611446576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561139757600080fd5b505afa1580156113ab573d6000803e3d6000fd5b505050506040513d60208110156113c157600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010281141561140c57600080925092505061144f565b600460159054906101000a900460ff161561143457600060010281146000925092505061144f565b6001800281146000925092505061144f565b60006001915091505b9091565b60095481565b600e60009054906101000a900460ff1681565b600460159054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e657600080fd5b80600c8190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60115481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157c57600080fd5b80600d8190555050565b600b5481565b6040805190810160405280600581526020017f302e342e3100000000000000000000000000000000000000000000000000000081525081565b60006115cf611230565b600e60018294508391906101000a81548160ff0219169083151502179055505050801515611a1c576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff16156119ee57600060038054905090506000600b54111561175957600061167e612710611670600b543073ffffffffffffffffffffffffffffffffffffffff1631611a1f90919063ffffffff16565b611aa990919063ffffffff16565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116e7573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b60008090505b600182038110156118f357600060038281548110151561177b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600061184c600260009054906101000a900460ff1660ff1661183e8460ff163073ffffffffffffffffffffffffffffffffffffffff1631611a1f90919063ffffffff16565b611aa990919063ffffffff16565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611894573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a2505050808060010191505061175f565b5060003073ffffffffffffffffffffffffffffffffffffffff16319050600060036001840381548110151561192457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611997573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a2505050611a1b565b7f625a40e68d9554793bf647bf32e4885e7f15bd1bfac262906cc7d26f376f20a260405160405180910390a15b5b50565b600080831415611a325760009050611aa3565b60008284029050828482811515611a4557fe5b04141515611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611bc86021913960400191505060405180910390fd5b809150505b92915050565b60008082111515611b22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b60008284811515611b2f57fe5b0490508091505092915050565b6000828211151515611bb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058209cb2c2cb5abc48afc92c8bdf5531ae53e0f4646c23b7fd45a92728a87ad6d48f0029","sourceMap":"59:1374:5:-;;;1784:5:0;1753:36;;;;;;;;;;;;;;;;;;;;119:591:5;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:591:5;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:591:5;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:591:5;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:591:5;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;119:591:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;491:14;515:13;538:7;555:14;579:9;598:11;619:8;637:17;664:9;683:11;2342:7:0;:14;2318:13;:20;:38;2310:47;;;;;;;;1741:5;2375:8;;:21;2367:30;;;;;;;;2425:13;:20;2407:9;;:39;;;;;;;;;;;;;;;;;;2461:7;2471:1;2461:11;;2456:286;2478:9;;;;;;;;;;;2474:13;;:1;:13;;;2456:286;;;2508:19;2530:13;2544:1;2530:16;;;;;;;;;;;;;;;;;;;;2508:38;;2560:12;2578:3;2560:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2560:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2617:1;2604:7;2612:1;2604:10;;;;;;;;;;;;;;;;;;;;:14;;;2596:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2685:7;2693:1;2685:10;;;;;;;;;;;;;;;;;;;;2668:9;:14;2678:3;2668:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2721:7;2729:1;2721:10;;;;;;;;;;;;;;;;;;;;2709:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:286;2489:3;;;;;;;2456:286;;;;2767:14;2751:13;;:30;;;;;;;;;;;;;;;;;;2807:14;2791:13;;:30;;;;;;;;;;;;;;;;;;2860:14;2831:12;;:44;;;;;;;;;;;;;;;;;;2896:9;2885:8;:20;;;;;;;;;;;;:::i;:::-;;2928:11;2915:10;;:24;;;;;;;;;;;;;;;;;;2959:8;2949:7;:18;;;;2996:17;2977:16;:36;;;;3034:9;3023:8;:20;;;;3066:12;;;;;;;;;;;:24;;;3091:1;3094:8;3104:10;;;;;;;;;;;3123:7;;3140:16;;3159:1;3066:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3066:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3066:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3066:95:0;;;;;;;;;;;;;;;;3053:10;:108;;;;3184:11;3171:10;;:24;;;;;;;;;;;;;;;;;;3252:8;3233:16;;:27;3205:25;:55;;;;3326:8;3298:25;;:36;3270:25;:64;;;;3363:5;3344:16;;:24;;;;;;;;;;;;;;;;;;3405:5;3378:24;;:32;;;;;;;;;;;;;;;;;;1943:1474;;;;;;;;;;119:591:5;;;;;;;;;;59:1374;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint256 _makerFee,\n        bool _unlockOnNo\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress,\n        _question,\n        _arbitrator,\n        _timeout,\n        _challengeEndTime,\n        _makerFee,\n        _unlockOnNo\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"}};