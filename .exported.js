module.exports = {"CharityChallenge":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[],"name":"Failed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"checkRealitio","outputs":[{"name":"happened","type":"bool"},{"name":"errored","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"0x60806040526000601160006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620021413803806200214183398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b5050929190602001805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505087518951141515620001a757600080fd5b612710600b54101515620001ba57600080fd5b60008951905060008090505b81811015620003aa5760008b82815181101515620001e057fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008b838151811015156200026357fe5b9060200190602002015160ff16111515620002e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8a82815181101515620002f557fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508a828151811015156200036557fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001c6565b508a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660069080519060200190620004859291906200074a565b5085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460088190555083600a8190555082600b81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff168152602001838152602001828103825287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620006635780601f10620006375761010080835404028352916020019162000663565b820191906000526020600020905b8154815290600101906020018083116200064557829003601f168201915b5050975050505050505050602060405180830381600087803b1580156200068957600080fd5b505af11580156200069e573d6000803e3d6000fd5b505050506040513d6020811015620006b557600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055505050505050505050505050620007f9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200078d57805160ff1916838001178555620007be565b82800160010185558215620007be579182015b82811115620007bd578251825591602001919060010190620007a0565b5b509050620007cd9190620007d1565b5090565b620007f691905b80821115620007f2576000816000905550600101620007d8565b5090565b90565b61193880620008096000396000f3fe608060405260043610610168576000357c01000000000000000000000000000000000000000000000000000000009004806387730309116100d3578063bc3fde4e1161008c578063bc3fde4e1461076c578063c407670f14610797578063ce606ee0146107c2578063d87a328a14610819578063fc741c7c14610844578063ffa1ad741461086f57610168565b806387730309146106275780639562364114610652578063a6a205c0146106a9578063b06a5c52146106e3578063b77309d61461070e578063ba7fd2fb1461073d57610168565b80635ead3d4b116101255780635ead3d4b1461040b5780635f95eb4d146104765780636cc6cde1146104db57806370a082311461053257806370dea79a146105975780637b8c8de1146105c257610168565b806307171d7f1461028c5780630ed7e499146102a3578063306a7ce01461031e5780633fad9ae01461034d5780634bb278f3146103dd5780634e71d92d146103f4575b600a54421115151561017957600080fd5b60003411151561018857600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156101d75750600034115b156101ef576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b34801561029857600080fd5b506102a16108ff565b005b3480156102af57600080fd5b506102dc600480360360208110156102c657600080fd5b8101908080359060200190929190505050610a92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032a57600080fd5b50610333610ad0565b604051808215151515815260200191505060405180910390f35b34801561035957600080fd5b50610362610ae3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a2578082015181840152602081019050610387565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e957600080fd5b506103f2610b81565b005b34801561040057600080fd5b50610409610c1a565b005b34801561041757600080fd5b5061045a6004803603602081101561042e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dcc565b604051808260ff1660ff16815260200191505060405180910390f35b34801561048257600080fd5b506104c56004803603602081101561049957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dec565b6040518082815260200191505060405180910390f35b3480156104e757600080fd5b506104f0610f4c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053e57600080fd5b506105816004803603602081101561055557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f72565b6040518082815260200191505060405180910390f35b3480156105a357600080fd5b506105ac610fda565b6040518082815260200191505060405180910390f35b3480156105ce57600080fd5b50610611600480360360208110156105e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b6040518082815260200191505060405180910390f35b34801561063357600080fd5b5061063c610ff8565b6040518082815260200191505060405180910390f35b34801561065e57600080fd5b50610667610ffe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106b557600080fd5b506106be611024565b6040518083151515158152602001821515151581526020019250505060405180910390f35b3480156106ef57600080fd5b506106f8611247565b6040518082815260200191505060405180910390f35b34801561071a57600080fd5b5061072361124d565b604051808215151515815260200191505060405180910390f35b34801561074957600080fd5b50610752611260565b604051808215151515815260200191505060405180910390f35b34801561077857600080fd5b50610781611273565b6040518082815260200191505060405180910390f35b3480156107a357600080fd5b506107ac611279565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b506107d761127f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561082557600080fd5b5061082e6112a4565b6040518082815260200191505060405180910390f35b34801561085057600080fd5b506108596112aa565b6040518082815260200191505060405180910390f35b34801561087b57600080fd5b506108846112b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108c45780820151818401526020810190506108a9565b50505050905090810190601f1680156108f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d544211151561090f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561096a57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610a1f573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610aa157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b795780601f10610b4e57610100808354040283529160200191610b79565b820191906000526020600020905b815481529060010190602001808311610b5c57829003601f168201915b505050505081565b601160009054906101000a900460ff16151515610b9d57600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610bc857600080fd5b600c544211151515610bd957600080fd5b600e60009054906101000a900460ff16151515610bf557600080fd5b610bfd6112e9565b6000601160006101000a81548160ff021916908315150217905550565b601160009054906101000a900460ff16151515610c3657600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610c6157600080fd5b600e60009054906101000a900460ff1680610c7d5750600c5442115b1515610c8857600080fd5b600e60019054906101000a900460ff161580610ca55750600c5442115b1515610cb057600080fd5b6000610cbb33610f72565b111515610cc757600080fd5b6000610cd233610f72565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d5f573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601160006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610e4b57600080fd5b6000610eb6610e90612710610e82600b543073ffffffffffffffffffffffffffffffffffffffff163161174390919063ffffffff16565b6117cd90919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff163161186090919063ffffffff16565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050610f43600260009054906101000a900460ff1660ff16610f358360ff168561174390919063ffffffff16565b6117cd90919063ffffffff16565b92505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff1615610f925760009050610fd5565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b600f6020528060005260406000206000915090505481565b600c5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156110b857600080fd5b505afa1580156110cc573d6000803e3d6000fd5b505050506040513d60208110156110e257600080fd5b81019080805190602001909291905050501561123a576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561118b57600080fd5b505afa15801561119f573d6000803e3d6000fd5b505050506040513d60208110156111b557600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600102811415611200576000809250925050611243565b600460149054906101000a900460ff1615611228576000600102811460009250925050611243565b60018002811460009250925050611243565b60006001915091505b9091565b60095481565b600e60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b600b5481565b6040805190810160405280600581526020017f302e342e3100000000000000000000000000000000000000000000000000000081525081565b60006112f3611024565b600e60018294508391906101000a81548160ff0219169083151502179055505050801515611740576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff161561171257600060038054905090506000600b54111561147d5760006113a2612710611394600b543073ffffffffffffffffffffffffffffffffffffffff163161174390919063ffffffff16565b6117cd90919063ffffffff16565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561140b573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b60008090505b6001820381101561161757600060038281548110151561149f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000611570600260009054906101000a900460ff1660ff166115628460ff163073ffffffffffffffffffffffffffffffffffffffff163161174390919063ffffffff16565b6117cd90919063ffffffff16565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156115b8573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a25050508080600101915050611483565b5060003073ffffffffffffffffffffffffffffffffffffffff16319050600060036001840381548110151561164857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156116bb573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a250505061173f565b7f625a40e68d9554793bf647bf32e4885e7f15bd1bfac262906cc7d26f376f20a260405160405180910390a15b5b50565b60008083141561175657600090506117c7565b6000828402905082848281151561176957fe5b041415156117c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806118ec6021913960400191505060405180910390fd5b809150505b92915050565b60008082111515611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481151561185357fe5b0490508091505092915050565b60008282111515156118da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058200944c540466ea79986d2f21a67a40dc34c4a0b5f9453c08440e6c25b98fa092b0029","sourceMap":"81:7237:0:-;;;1716:5;1685:36;;;;;;;;;;;;;;;;;;;;1875:1465;8:9:-1;5:2;;;30:1;27;20:12;5:2;1875:1465:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1875:1465:0;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1875:1465:0;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1875:1465:0;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1875:1465:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2274:7;:14;2250:13;:20;:38;2242:47;;;;;;;;1673:5;2307:8;;:21;2299:30;;;;;;;;2339:11;2353:13;:20;2339:34;;2388:6;2397:1;2388:10;;2383:282;2404:6;2400:1;:10;2383:282;;;2431:19;2453:13;2467:1;2453:16;;;;;;;;;;;;;;;;;;2431:38;;2483:12;2501:3;2483:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2483:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2540:1;2527:7;2535:1;2527:10;;;;;;;;;;;;;;;;;;:14;;;2519:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2608:7;2616:1;2608:10;;;;;;;;;;;;;;;;;;2591:9;:14;2601:3;2591:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2644:7;2652:1;2644:10;;;;;;;;;;;;;;;;;;2632:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2383:282;2412:3;;;;;;;2383:282;;;;2690:14;2674:13;;:30;;;;;;;;;;;;;;;;;;2730:14;2714:13;;:30;;;;;;;;;;;;;;;;;;2783:14;2754:12;;:44;;;;;;;;;;;;;;;;;;2819:9;2808:8;:20;;;;;;;;;;;;:::i;:::-;;2851:11;2838:10;;:24;;;;;;;;;;;;;;;;;;2882:8;2872:7;:18;;;;2919:17;2900:16;:36;;;;2957:9;2946:8;:20;;;;2989:12;;;;;;;;;;;:24;;;3014:1;3017:8;3027:10;;;;;;;;;;;3046:7;;3063:16;;3082:1;2989:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2989:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2989:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2989:95:0;;;;;;;;;;;;;;;;2976:10;:108;;;;3107:11;3094:10;;:24;;;;;;;;;;;;;;;;;;3175:8;3156:16;;:27;3128:25;:55;;;;3249:8;3221:25;;:36;3193:25;:64;;;;3286:5;3267:16;;:24;;;;;;;;;;;;;;;;;;3328:5;3301:24;;:32;;;;;;;;;;;;;;;;;;1875:1465;;;;;;;;;;;81:7237;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\nimport \"./SafeMath.sol\";\n\ncontract CharityChallenge {\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n\n    event Received(address indexed sender, uint256 value);\n\n    event Donated(address indexed npo, uint256 value);\n\n    event Failed();\n\n    event Fee(address indexed maker, uint256 value);\n\n    event Claimed(address indexed claimer, uint256 value);\n\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\n\n    string public constant VERSION = \"0.4.1\";\n\n    address payable public contractOwner;\n\n    // key is npo address, value is ratio\n    mapping(address => uint8) public npoRatios;\n\n    uint8 sumRatio;\n\n    address payable[] public npoAddresses;\n\n    address public marketAddress;\n\n    bool public unlockOnNo;\n\n    IRealityCheck realityCheck;\n\n    string public question;\n\n    address public arbitrator;\n\n    uint256 public timeout;\n\n    bytes32 public questionId;\n\n    uint256 public challengeEndTime;\n\n    // For a fee of 10.5%, pass 1050\n    uint256 public makerFee;\n\n    uint256 public challengeSafetyHatchTime1;\n\n    uint256 public challengeSafetyHatchTime2;\n\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\n    bool public isEventFinalized;\n\n    // hasChallengeAccomplished will be set to true if we got the expected\n    // result that allow to unlock the funds.\n    bool public hasChallengeAccomplished;\n\n    bool private safetyHatchClaimSucceeded;\n\n    mapping(address => uint256) public donorBalances;\n\n    uint256 public donorCount;\n\n    // We use a divider of 10000 instead of 100 to have more granularity for\n    // the maker fee\n    uint256 constant feeDivider = 10000;\n\n    bool private mReentrancyLock = false;\n    modifier nonReentrant() {\n        require(!mReentrancyLock);\n        mReentrancyLock = true;\n        _;\n        mReentrancyLock = false;\n    }\n\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint256 _makerFee,\n        bool _unlockOnNo\n    ) public\n    {\n        require(_npoAddresses.length == _ratios.length);\n        require(makerFee < feeDivider);\n        uint length = _npoAddresses.length;\n        for (uint i = 0; i < length; i++) {\n            address payable npo = _npoAddresses[i];\n            npoAddresses.push(npo);\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\n            npoRatios[npo] = _ratios[i];\n            sumRatio += _ratios[i];\n        }\n        contractOwner = _contractOwner;\n        marketAddress = _marketAddress;\n        realityCheck = IRealityCheck(_marketAddress);\n        question = _question;\n        arbitrator = _arbitrator;\n        timeout = _timeout;\n        challengeEndTime = _challengeEndTime;\n        makerFee = _makerFee;\n        questionId = realityCheck.askQuestion(0, question, arbitrator, uint32(timeout), uint32(challengeEndTime), 0);\n        unlockOnNo = _unlockOnNo;\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\n        isEventFinalized = false;\n        hasChallengeAccomplished = false;\n    }\n\n    function() external payable {\n        require(now <= challengeEndTime);\n        require(msg.value > 0);\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\n            donorCount++;\n        }\n        donorBalances[msg.sender] += msg.value;\n        emit Received(msg.sender, msg.value);\n    }\n\n    function balanceOf(address _donorAddress) public view returns (uint256) {\n        if (safetyHatchClaimSucceeded) {\n            return 0;\n        }\n        return donorBalances[_donorAddress];\n    }\n\n    function finalize() nonReentrant external {\n        require(now > challengeEndTime);\n        require(now <= challengeSafetyHatchTime1);\n        require(!isEventFinalized);\n        doFinalize();\n    }\n\n    function doFinalize() private {\n        bool hasError;\n        (hasChallengeAccomplished, hasError) = checkRealitio();\n        if (!hasError) {\n            isEventFinalized = true;\n            if (hasChallengeAccomplished) {\n                uint length = npoAddresses.length;\n                if (makerFee > 0) {\n                    uint256 amount = address(this).balance.mul(makerFee).div(feeDivider);\n                    contractOwner.transfer(amount);\n                    emit Fee(contractOwner, amount);\n                }\n                for (uint i = 0; i < length - 1; i++) {\n                    address payable npo = npoAddresses[i];\n                    uint8 ratio = npoRatios[npo];\n                    uint256 amount = address(this).balance.mul(ratio).div(sumRatio);\n                    npo.transfer(amount);\n                    emit Donated(npo, amount);\n                }\n                // Don't want to keep any amount in the contract\n                uint256 amount = address(this).balance;\n                address payable npo = npoAddresses[length - 1];\n                npo.transfer(amount);\n                emit Donated(npo, amount);\n            } else {\n                emit Failed();\n            }\n        }\n    }\n\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\n        require(npoRatios[_npo] > 0);\n        uint256 amountForNPO = address(this).balance.sub(address(this).balance.mul(makerFee).div(feeDivider));\n        uint8 ratio = npoRatios[_npo];\n        return amountForNPO.mul(ratio).div(sumRatio);\n    }\n\n    function claim() nonReentrant external {\n        require(now > challengeEndTime);\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\n        require(balanceOf(msg.sender) > 0);\n\n        uint256 claimedAmount = balanceOf(msg.sender);\n        donorBalances[msg.sender] = 0;\n        msg.sender.transfer(claimedAmount);\n        emit Claimed(msg.sender, claimedAmount);\n    }\n\n    function safetyHatchClaim() external {\n        require(now > challengeSafetyHatchTime2);\n        require(msg.sender == contractOwner);\n\n        uint totalContractBalance = address(this).balance;\n        safetyHatchClaimSucceeded = true;\n        contractOwner.transfer(address(this).balance);\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\n    }\n\n    function checkRealitio() public view returns (bool happened, bool errored) {\n        if (realityCheck.isFinalized(questionId)) {\n            bytes32 answer = realityCheck.getFinalAnswer(questionId);\n            if (answer == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                // Treat 'invalid' outcome as 'no'\n                // because 'invalid' is one of the valid outcomes\n                return (false, false);\n            } else {\n                if (unlockOnNo) {\n                    return (answer == 0x0000000000000000000000000000000000000000000000000000000000000000, false);\n                }\n                return (answer == 0x0000000000000000000000000000000000000000000000000000000000000001, false);\n            }\n        } else {\n            return (false, true);\n        }\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"RealityCheckMock":{"abi":[{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"questions","outputs":[{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"name":"template_id","type":"uint256"},{"name":"question","type":"string"},{"name":"arbitrator","type":"address"},{"name":"timeout","type":"uint32"},{"name":"opening_ts","type":"uint32"},{"name":"nonce","type":"uint256"}],"name":"askQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getFinalAnswer","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"question_id","type":"bytes32"}],"name":"getOpeningTS","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"opening_ts","type":"uint32"},{"name":"finalized","type":"bool"},{"name":"finalAnswer","type":"bytes32"}],"name":"addQuestion","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalized","type":"bool"}],"name":"setFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"question_id","type":"bytes32"},{"name":"finalAnswer","type":"bytes32"}],"name":"setFinalAnswer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x608060405234801561001057600080fd5b5061061e806100206000396000f3fe608060405260043610610098576000357c0100000000000000000000000000000000000000000000000000000000900480638923e5461161006b5780638923e546146102cf57806395addb90146103145780639e63fa6a14610381578063a462fb7b146103dc57610098565b806309f709721461009d578063762c38fd146100e4578063768e8fc5146102145780637f8d429e1461027c575b600080fd5b3480156100a957600080fd5b506100e2600480360360408110156100c057600080fd5b810190808035906020019092919080351515906020019092919050505061042b565b005b3480156100f057600080fd5b506101fe600480360360c081101561010757600080fd5b81019080803590602001909291908035906020019064010000000081111561012e57600080fd5b82018360208201111561014057600080fd5b8035906020019184600183028401116401000000008311171561016257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190803563ffffffff1690602001909291908035906020019092919050505061045c565b6040518082815260200191505060405180910390f35b6102666004803603608081101561022a57600080fd5b8101908080359060200190929190803563ffffffff1690602001909291908035151590602001909291908035906020019092919050505061048e565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b506102b56004803603602081101561029f57600080fd5b8101908080359060200190929190505050610513565b604051808215151515815260200191505060405180910390f35b3480156102db57600080fd5b50610312600480360360408110156102f257600080fd5b81019080803590602001909291908035906020019092919050505061053f565b005b34801561032057600080fd5b5061034d6004803603602081101561033757600080fd5b810190808035906020019092919050505061055d565b604051808463ffffffff1663ffffffff16815260200183151515158152602001828152602001935050505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b81019080803590602001909291905050506105a4565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156103e857600080fd5b50610415600480360360208110156103ff57600080fd5b81019080803590602001909291905050506105d3565b6040518082815260200191505060405180910390f35b8060008084815260200190815260200160002060000160046101000a81548160ff0219169083151502179055505050565b60007fafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be60010290509695505050505050565b60008360008087815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055508260008087815260200190815260200160002060000160046101000a81548160ff0219169083151502179055508160008087815260200190815260200160002060010181905550949350505050565b600080600083815260200190815260200160002060000160049054906101000a900460ff169050919050565b80600080848152602001908152602001600020600101819055505050565b60006020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060010154905083565b600080600083815260200190815260200160002060000160009054906101000a900463ffffffff169050919050565b600080600083815260200190815260200160002060010154905091905056fea165627a7a72305820c44daa9a253017fbbaea5405800b6a6489bedc0258d371bffc1dfca47429d4ad0029","sourceMap":"56:1513:3:-;;;266:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;266:28:3;56:1513;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./IRealityCheck.sol\";\n\ncontract RealityCheckMock is IRealityCheck {\n    struct Question {\n        uint32 opening_ts;\n        bool finalized;\n        bytes32 finalAnswer;\n    }\n\n    mapping(bytes32 => Question) public questions;\n\n    constructor() public {\n    }\n\n    function askQuestion(\n        uint256 template_id, string memory question,\n        address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) public returns (bytes32) {\n\n        return 0xafffceb5788b34ac2ad5f638db53a805bd98419d3a1f00066d4357657736c9be;\n    }\n\n    function isFinalized(bytes32 question_id) public view returns (bool) {\n        return questions[question_id].finalized;\n    }\n\n    function getFinalAnswer(bytes32 question_id) public view returns (bytes32) {\n        return questions[question_id].finalAnswer;\n    }\n\n    function getOpeningTS(bytes32 question_id) public view returns (uint32) {\n        return questions[question_id].opening_ts;\n    }\n\n    function addQuestion(bytes32 question_id, uint32 opening_ts, bool finalized, bytes32 finalAnswer)\n    public payable returns (bytes32) {\n        questions[question_id].opening_ts = opening_ts;\n        questions[question_id].finalized = finalized;\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n\n    function setFinalized(bytes32 question_id, bool finalized) public {\n        questions[question_id].finalized = finalized;\n    }\n\n    function setFinalAnswer(bytes32 question_id, bytes32 finalAnswer) public {\n        questions[question_id].finalAnswer = finalAnswer;\n    }\n}\n","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"},"TestableCharityChallenge":{"abi":[{"constant":false,"inputs":[],"name":"safetyHatchClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"npoAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hasChallengeAccomplished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"question","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"npoRatios","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_npo","type":"address"}],"name":"getExpectedDonationAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"arbitrator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_donorAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"donorBalances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"checkRealitio","outputs":[{"name":"happened","type":"bool"},{"name":"errored","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"questionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isEventFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"unlockOnNo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"donorCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challengeSafetyHatchTime2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"makerFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_contractOwner","type":"address"},{"name":"_npoAddresses","type":"address[]"},{"name":"_ratios","type":"uint8[]"},{"name":"_marketAddress","type":"address"},{"name":"_question","type":"string"},{"name":"_arbitrator","type":"address"},{"name":"_timeout","type":"uint256"},{"name":"_challengeEndTime","type":"uint256"},{"name":"_makerFee","type":"uint256"},{"name":"_unlockOnNo","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"npo","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[],"name":"Failed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"maker","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Fee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claimer","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SafetyHatchClaimed","type":"event"},{"constant":false,"inputs":[{"name":"_challengeEndTime","type":"uint256"}],"name":"setChallengeEndTime","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime1","type":"uint256"}],"name":"setChallengeSafetyHatchTime1","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_challengeSafetyHatchTime2","type":"uint256"}],"name":"setChallengeSafetyHatchTime2","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000601160006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620023863803806200238683398101806040526101408110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856020820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856020820283011164010000000082111715620000fd57600080fd5b50509291906020018051906020019092919080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560018202830111640100000000821117156200015957600080fd5b505092919060200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508989898989898989898987518951141515620001b157600080fd5b612710600b54101515620001c457600080fd5b60008951905060008090505b81811015620003b45760008b82815181101515620001ea57fe5b90602001906020020151905060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008b838151811015156200026d57fe5b9060200190602002015160ff16111515620002f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526174696f206d757374206265206120706f736974697665206e756d6265720081525060200191505060405180910390fd5b8a82815181101515620002ff57fe5b90602001906020020151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508a828151811015156200036f57fe5b90602001906020020151600260008282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550508080600101915050620001d0565b508a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600690805190602001906200048f9291906200075e565b5085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460088190555083600a8190555082600b81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663762c38fd60006006600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854600a5460006040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018381526020018281038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200066d5780601f1062000641576101008083540402835291602001916200066d565b820191906000526020600020905b8154815290600101906020018083116200064f57829003601f168201915b5050975050505050505050602060405180830381600087803b1580156200069357600080fd5b505af1158015620006a8573d6000803e3d6000fd5b505050506040513d6020811015620006bf57600080fd5b810190808051906020019092919050505060098190555081600460146101000a81548160ff02191690831515021790555062eff100600a5401600c819055506301dfe200600c5401600d819055506000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055505050505050505050505050505050505050505050506200080d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007a157805160ff1916838001178555620007d2565b82800160010185558215620007d2579182015b82811115620007d1578251825591602001919060010190620007b4565b5b509050620007e19190620007e5565b5090565b6200080a91905b8082111562000806576000816000905550600101620007ec565b5090565b90565b611b69806200081d6000396000f3fe6080604052600436106101b9576000357c0100000000000000000000000000000000000000000000000000000000900480638773030911610109578063c407670f116100a7578063d87a328a11610081578063d87a328a146108e0578063dfc39d771461090b578063fc741c7c14610946578063ffa1ad7414610971576101b9565b8063c407670f14610823578063c8e12f141461084e578063ce606ee014610889576101b9565b8063b06a5c52116100e3578063b06a5c521461076f578063b77309d61461079a578063ba7fd2fb146107c9578063bc3fde4e146107f8576101b9565b806387730309146106b357806395623641146106de578063a6a205c014610735576101b9565b80635ead3d4b1161017657806370a082311161015057806370a082311461058357806370dea79a146105e8578063770bd0e3146106135780637b8c8de11461064e576101b9565b80635ead3d4b1461045c5780635f95eb4d146104c75780636cc6cde11461052c576101b9565b806307171d7f146102dd5780630ed7e499146102f4578063306a7ce01461036f5780633fad9ae01461039e5780634bb278f31461042e5780634e71d92d14610445575b600a5442111515156101ca57600080fd5b6000341115156101d957600080fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156102285750600034115b15610240576010600081548092919060010191905055505b34600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b3480156102e957600080fd5b506102f2610a01565b005b34801561030057600080fd5b5061032d6004803603602081101561031757600080fd5b8101908080359060200190929190505050610b94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037b57600080fd5b50610384610bd2565b604051808215151515815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610be5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f35780820151818401526020810190506103d8565b50505050905090810190601f1680156104205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043a57600080fd5b50610443610c83565b005b34801561045157600080fd5b5061045a610d1c565b005b34801561046857600080fd5b506104ab6004803603602081101561047f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ece565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104d357600080fd5b50610516600480360360208110156104ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eee565b6040518082815260200191505060405180910390f35b34801561053857600080fd5b5061054161104e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058f57600080fd5b506105d2600480360360208110156105a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611074565b6040518082815260200191505060405180910390f35b3480156105f457600080fd5b506105fd6110dc565b6040518082815260200191505060405180910390f35b34801561061f57600080fd5b5061064c6004803603602081101561063657600080fd5b81019080803590602001909291905050506110e2565b005b34801561065a57600080fd5b5061069d6004803603602081101561067157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611147565b6040518082815260200191505060405180910390f35b3480156106bf57600080fd5b506106c861115f565b6040518082815260200191505060405180910390f35b3480156106ea57600080fd5b506106f3611165565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074157600080fd5b5061074a61118b565b6040518083151515158152602001821515151581526020019250505060405180910390f35b34801561077b57600080fd5b506107846113ae565b6040518082815260200191505060405180910390f35b3480156107a657600080fd5b506107af6113b4565b604051808215151515815260200191505060405180910390f35b3480156107d557600080fd5b506107de6113c7565b604051808215151515815260200191505060405180910390f35b34801561080457600080fd5b5061080d6113da565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b506108386113e0565b6040518082815260200191505060405180910390f35b34801561085a57600080fd5b506108876004803603602081101561087157600080fd5b81019080803590602001909291905050506113e6565b005b34801561089557600080fd5b5061089e61144b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108ec57600080fd5b506108f5611470565b6040518082815260200191505060405180910390f35b34801561091757600080fd5b506109446004803603602081101561092e57600080fd5b8101908080359060200190929190505050611476565b005b34801561095257600080fd5b5061095b6114db565b6040518082815260200191505060405180910390f35b34801561097d57600080fd5b506109866114e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109c65780820151818401526020810190506109ab565b50505050905090810190601f1680156109f35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600d5442111515610a1157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6c57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190506001600e60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610b21573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1ac1e39f5a410afcc9fd213aab1b92287e00cf00e216f3776f352ab328d124f9826040518082815260200191505060405180910390a250565b600381815481101515610ba357fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c7b5780601f10610c5057610100808354040283529160200191610c7b565b820191906000526020600020905b815481529060010190602001808311610c5e57829003601f168201915b505050505081565b601160009054906101000a900460ff16151515610c9f57600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610cca57600080fd5b600c544211151515610cdb57600080fd5b600e60009054906101000a900460ff16151515610cf757600080fd5b610cff61151a565b6000601160006101000a81548160ff021916908315150217905550565b601160009054906101000a900460ff16151515610d3857600080fd5b6001601160006101000a81548160ff021916908315150217905550600a5442111515610d6357600080fd5b600e60009054906101000a900460ff1680610d7f5750600c5442115b1515610d8a57600080fd5b600e60019054906101000a900460ff161580610da75750600c5442115b1515610db257600080fd5b6000610dbd33611074565b111515610dc957600080fd5b6000610dd433611074565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e61573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2506000601160006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16111515610f4d57600080fd5b6000610fb8610f92612710610f84600b543073ffffffffffffffffffffffffffffffffffffffff163161197490919063ffffffff16565b6119fe90919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff1631611a9190919063ffffffff16565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050611045600260009054906101000a900460ff1660ff166110378360ff168561197490919063ffffffff16565b6119fe90919063ffffffff16565b92505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60029054906101000a900460ff161561109457600090506110d7565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113d57600080fd5b80600a8190555050565b600f6020528060005260406000206000915090505481565b600c5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f8d429e6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d602081101561124957600080fd5b8101908080519060200190929190505050156113a1576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a462fb7b6009546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112f257600080fd5b505afa158015611306573d6000803e3d6000fd5b505050506040513d602081101561131c57600080fd5b810190808051906020019092919050505090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001028114156113675760008092509250506113aa565b600460149054906101000a900460ff161561138f5760006001028114600092509250506113aa565b600180028114600092509250506113aa565b60006001915091505b9091565b60095481565b600e60009054906101000a900460ff1681565b600460149054906101000a900460ff1681565b600a5481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144157600080fd5b80600c8190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d157600080fd5b80600d8190555050565b600b5481565b6040805190810160405280600581526020017f302e342e3100000000000000000000000000000000000000000000000000000081525081565b600061152461118b565b600e60018294508391906101000a81548160ff0219169083151502179055505050801515611971576001600e60006101000a81548160ff021916908315150217905550600e60019054906101000a900460ff161561194357600060038054905090506000600b5411156116ae5760006115d36127106115c5600b543073ffffffffffffffffffffffffffffffffffffffff163161197490919063ffffffff16565b6119fe90919063ffffffff16565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561163c573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d826040518082815260200191505060405180910390a2505b60008090505b600182038110156118485760006003828154811015156116d057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060006117a1600260009054906101000a900460ff1660ff166117938460ff163073ffffffffffffffffffffffffffffffffffffffff163161197490919063ffffffff16565b6119fe90919063ffffffff16565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156117e9573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543826040518082815260200191505060405180910390a250505080806001019150506116b4565b5060003073ffffffffffffffffffffffffffffffffffffffff16319050600060036001840381548110151561187957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118ec573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e543836040518082815260200191505060405180910390a2505050611970565b7f625a40e68d9554793bf647bf32e4885e7f15bd1bfac262906cc7d26f376f20a260405160405180910390a15b5b50565b60008083141561198757600090506119f8565b6000828402905082848281151561199a57fe5b041415156119f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611b1d6021913960400191505060405180910390fd5b809150505b92915050565b60008082111515611a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b60008284811515611a8457fe5b0490508091505092915050565b6000828211151515611b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a72305820db8fb981d45d56bf008a49cb1807649ab54864d903659892db9d3b62edfd60640029","sourceMap":"59:1374:5:-;;;1716:5:0;1685:36;;;;;;;;;;;;;;;;;;;;119:591:5;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:591:5;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;119:591:5;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:591:5;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;119:591:5;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;119:591:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;491:14;515:13;538:7;555:14;579:9;598:11;619:8;637:17;664:9;683:11;2274:7:0;:14;2250:13;:20;:38;2242:47;;;;;;;;1673:5;2307:8;;:21;2299:30;;;;;;;;2339:11;2353:13;:20;2339:34;;2388:6;2397:1;2388:10;;2383:282;2404:6;2400:1;:10;2383:282;;;2431:19;2453:13;2467:1;2453:16;;;;;;;;;;;;;;;;;;2431:38;;2483:12;2501:3;2483:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2483:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2540:1;2527:7;2535:1;2527:10;;;;;;;;;;;;;;;;;;:14;;;2519:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2608:7;2616:1;2608:10;;;;;;;;;;;;;;;;;;2591:9;:14;2601:3;2591:14;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2644:7;2652:1;2644:10;;;;;;;;;;;;;;;;;;2632:8;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2383:282;2412:3;;;;;;;2383:282;;;;2690:14;2674:13;;:30;;;;;;;;;;;;;;;;;;2730:14;2714:13;;:30;;;;;;;;;;;;;;;;;;2783:14;2754:12;;:44;;;;;;;;;;;;;;;;;;2819:9;2808:8;:20;;;;;;;;;;;;:::i;:::-;;2851:11;2838:10;;:24;;;;;;;;;;;;;;;;;;2882:8;2872:7;:18;;;;2919:17;2900:16;:36;;;;2957:9;2946:8;:20;;;;2989:12;;;;;;;;;;;:24;;;3014:1;3017:8;3027:10;;;;;;;;;;;3046:7;;3063:16;;3082:1;2989:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2989:95:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2989:95:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2989:95:0;;;;;;;;;;;;;;;;2976:10;:108;;;;3107:11;3094:10;;:24;;;;;;;;;;;;;;;;;;3175:8;3156:16;;:27;3128:25;:55;;;;3249:8;3221:25;;:36;3193:25;:64;;;;3286:5;3267:16;;:24;;;;;;;;;;;;;;;;;;3328:5;3301:24;;:32;;;;;;;;;;;;;;;;;;1875:1465;;;;;;;;;;;119:591:5;;;;;;;;;;59:1374;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./CharityChallenge.sol\";\n\ncontract TestableCharityChallenge is CharityChallenge {\n    constructor(\n        address payable _contractOwner,\n        address payable[] memory _npoAddresses,\n        uint8[] memory _ratios,\n        address _marketAddress,\n        string memory _question,\n        address _arbitrator,\n        uint256 _timeout,\n        uint256 _challengeEndTime,\n        uint256 _makerFee,\n        bool _unlockOnNo\n    ) CharityChallenge(\n        _contractOwner,\n        _npoAddresses,\n        _ratios,\n        _marketAddress,\n        _question,\n        _arbitrator,\n        _timeout,\n        _challengeEndTime,\n        _makerFee,\n        _unlockOnNo\n    ) public {}\n\n    ///////////////////////////////////////////\n    // FUNCTIONS BELOW ARE USED FOR TESTING  //\n    ///////////////////////////////////////////\n\n    function setChallengeEndTime(uint256 _challengeEndTime) public {\n        require(msg.sender == contractOwner);\n        challengeEndTime = _challengeEndTime;\n    }\n\n    function setChallengeSafetyHatchTime1(uint256 _challengeSafetyHatchTime1) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime1 = _challengeSafetyHatchTime1;\n    }\n\n    function setChallengeSafetyHatchTime2(uint256 _challengeSafetyHatchTime2) public {\n        require(msg.sender == contractOwner);\n        challengeSafetyHatchTime2 = _challengeSafetyHatchTime2;\n    }\n}","compiler":{"name":"solc","version":"0.5.2+commit.1df8f40c.Emscripten.clang"},"schemaVersion":"3.0.2"}};